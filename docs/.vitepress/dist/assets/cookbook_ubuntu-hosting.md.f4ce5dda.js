import{_ as s,o as e,c as o,$ as a}from"./chunks/framework.9fa1e75e.js";const C=JSON.parse('{"title":"Ubuntu hosting setup","description":"","frontmatter":{},"headers":[],"relativePath":"cookbook/ubuntu-hosting.md","filePath":"cookbook/ubuntu-hosting.md","lastUpdated":1690289066000}'),n={name:"cookbook/ubuntu-hosting.md"},t=a(`<h1 id="ubuntu-hosting-setup" tabindex="-1">Ubuntu hosting setup <a class="header-anchor" href="#ubuntu-hosting-setup" aria-label="Permalink to &quot;Ubuntu hosting setup&quot;">​</a></h1><h2 id="setting-up-the-ubuntu-vps" tabindex="-1">Setting up the Ubuntu VPS <a class="header-anchor" href="#setting-up-the-ubuntu-vps" aria-label="Permalink to &quot;Setting up the Ubuntu VPS&quot;">​</a></h2><p>We&#39;ll start off by creating an Ubuntu VPS on AWS Lightsail. There are many services to use for hosting an Ubuntu VPS and the rest of the recipe is platform-agnostic.</p><ol><li>In an <a href="https://lightsail.aws.amazon.com" target="_blank" rel="noreferrer">AWS Lightsail account</a>, log in and create an <strong>Ubuntu 20.04 LTS</strong> (&quot;OS Only&quot;) instance. You need at least 1GB of RAM. We suggest 2GB to be safe. <ul><li>There is a step on this first page to select or add an SSH key to connect securely from your computer. Follow Lightsail&#39;s directions to do this.</li></ul></li><li>Complete any additional configurations you want, then <strong>create the instance</strong>. Once the instance is created, click on it to continue configuration.</li><li>On the &quot;Networking&quot; tab, you should see that the SSH and HTTP ports are already open. In addition, <strong>open the HTTPS port</strong> by clicking &quot;Add rule&quot; and selecting &quot;HTTPS.&quot; You need this for <code>https://</code> connections. <ul><li>Wait a couple minutes even after it says it&#39;s ready, to be sure it will accept your SSH connection.</li></ul></li><li>SSH to your server&#39;s <code>ubuntu</code> account, according to the Lightsail instructions. This account has <code>sudo</code> privileges so you can take care of tasks that require root access.</li><li><strong>Install MongoDB Community Edition.</strong> Instead follow the <a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/" target="_blank" rel="noreferrer">official instructions for installing MongoDB Community Edition on Ubuntu</a>. <ul><li><strong>Be sure not to miss the command <code>sudo systemctl enable mongod</code></strong> which ensures it starts up on every reboot.</li><li>Don&#39;t use an Ubuntu package for this since they may be outdated.</li></ul></li><li><strong>Install Node.js 16.x.</strong> Don&#39;t use an obsolete Ubuntu package. Instead follow the <a href="https://github.com/nodesource/distributions/blob/master/README.md#debinstall" target="_blank" rel="noreferrer">official instructions for installing Node.js 16.x on Ubuntu</a><ul><li>Again, it&#39;s best to not use an Ubuntu package for this.</li></ul></li><li><strong>Install nginx.</strong> This one is up to date in nginx, so it&#39;s one line:</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt-get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nginx</span></span></code></pre></div><ol start="8"><li><strong>Install <code>nano</code>.</strong> This is a basic text editor we can use when configuring <code>nginx</code>. <ul><li>If you prefer <code>vim</code>, or have remote editing support in your favorite visual text editor, that&#39;s fine too.</li></ul></li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt-get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nano</span></span></code></pre></div><ol start="9"><li><strong>Install <code>pm2</code>.</strong> This is a tool to start and restart the site for you and keep it running:</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pm2</span></span></code></pre></div><ol start="10"><li>We shouldn&#39;t use an account with sudo privileges to run the site. So <strong>create a <em>non-root</em> user</strong> to manage your Apostrophe site:</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">useradd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nodeapps</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/home/nodeapps</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/bash</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The Apostrophe convention is to name this user <code>nodeapps</code>. This name is not required, but we will continue to use it in this recipe.</p><p>We&#39;re specifying the <code>bash</code> shell here because the default <code>sh</code> shell is no one&#39;s favorite, but you can change this.</p></div><ol start="11"><li>We&#39;re almost ready to use the account, but first <strong>let&#39;s make sure <code>pm2</code> can restart our site</strong> if the server reboots:</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">su</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pm2 startup ubuntu -u nodeapps --hp /home/nodeapps/var/www</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><ol start="12"><li>If there are no errors, we&#39;re ready to continue. <strong>Now switch to that new user in your shell</strong>:</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">su</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nodeapps</span></span></code></pre></div><p>From here on out we never run a command as root, except as explicitly noted. This <code>nodeapps</code> account doesn&#39;t have sudo privileges, and that&#39;s a good thing for security.</p><h3 id="deploying-a-site-for-the-first-time" tabindex="-1">Deploying a site for the first time <a class="header-anchor" href="#deploying-a-site-for-the-first-time" aria-label="Permalink to &quot;Deploying a site for the first time&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You can do this series of steps each time you want to add a new site to the VPS. You can run more than one site on a server, but for security and performance you might prefer to run them on separate servers in production.</p></div><ol><li>If you didn&#39;t already, SSH to the <code>ubuntu</code> user on your server (the last step of the previous section). Then run <code>sudo su - nodeapps</code> to switch users.</li><li><strong>Deploy the Apostrophe site code to the VPS.</strong> We&#39;ll use the <code>a3-boilerplate</code> project as an example. <ul><li>We&#39;ll <code>git clone</code> a project in the home directory as a simple way to deploy it. You may use a CI/CD tool or some other method for regular deployments. You will also likely want to put the code in another location (e.g., <code>/var/www</code>).</li></ul></li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/apostrophecms/a3-boilerplate</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a3-boilerplate</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span></span></code></pre></div><ol start="3"><li><strong>Build production front end assets</strong> (including the Apostrophe user interface code):</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># This script in the boilerplate is an alias for the Apostrophe task</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># \`NODE_ENV=production node app @apostrophecms/asset:build\`</span></span></code></pre></div><ol start="4"><li><strong>Now we instruct <code>pm2</code> to launch the site and to keep it running.</strong> Substitute the shortname of your own project for <code>a3-boilerplate</code> below.</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pm2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name=a3-boilerplate</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">serve</span></span>
<span class="line"><span style="color:#FFCB6B;">pm2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">save</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># The second command saves our \`pm2\` configuration for future reboots.</span></span></code></pre></div><p>At this point Apostrophe is running on port <code>3000</code>. We need to configure nginx as a proxy server to handle HTTP and HTTPS connections on port <code>80</code> and <code>443</code> and forward them.</p><h3 id="adding-your-site-to-nginx" tabindex="-1">Adding your site to nginx <a class="header-anchor" href="#adding-your-site-to-nginx" aria-label="Permalink to &quot;Adding your site to nginx&quot;">​</a></h3><ol><li>SSH to the <code>ubuntu</code> user shell where you have sudo access. If you followed the instructions above and are on the <code>nodeapps</code> user, simply type <code>exit</code> and submit.</li><li>Create the nginx configuration file, <code>/etc/nginx/conf.d/your-project-shortname-here.conf</code>. <ul><li>Replace <code>your.host.name</code> with the DNS hostname you have pointed to your server&#39;s IP address for your site.</li></ul></li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nano</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/nginx/conf.d/your-project-shortname-here.conf</span></span></code></pre></div><ol start="3"><li>In the editor, <strong>paste the following, replacing <code>your.host.name</code> and <code>a3-boilerplate</code> as directed</strong>:</li></ol><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">server</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;"> listen </span><span style="color:#A6ACCD;">*:80</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Replace \`your.host.name\` with your actual hostname</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;"> server_name </span><span style="color:#A6ACCD;">your.host.name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">@proxy </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> proxy_pass </span><span style="color:#A6ACCD;">http://localhost:3000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">Host </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">host</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">X-Real-IP </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">remote_addr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">X-Forwarded-For </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">proxy_add_x_forwarded_for</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">X-Forwarded-Proto </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">scheme</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># Remember to replace \`a3-boilerplate\` with your project directory name</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> root </span><span style="color:#A6ACCD;">/home/nodeapps/a3-boilerplate/public</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> try_files $</span><span style="color:#A6ACCD;">uri @proxy</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> expires </span><span style="color:#A6ACCD;">7d</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># To save, press CTL+x, then follow the steps to confirm.</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The <code>proxy_set_header</code> statements pass information to Apostrophe so it can still see the visitor&#39;s IP address.</p><p>The <code>root</code> and <code>try_files</code> statements let nginx serve static files directly, for the best speed; if the URL isn&#39;t a static file, it is passed to Apostrophe. <code>expires 7d</code> allows the browser to cache the static files, for performance.</p></div><ol><li><p>You&#39;ll want to <strong>add SSL for HTTPS connections</strong>, too. For that, follow the LetsEncrypt <a href="https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx.html" target="_blank" rel="noreferrer">Certbot documentation</a>. Certbot will make the necessary nginx configuration changes for you.</p></li><li><p>Now instruct <code>nginx</code> to restart:</p></li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">systemctl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">reload</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nginx</span></span></code></pre></div><p><strong>Your site should be up!</strong> Visit <code>http://your.host.name</code> to see it. If you didn&#39;t add it to your DNS yet, or it hasn&#39;t propagated, you won&#39;t be able to reach it yet.</p><h2 id="working-on-the-site-after-deployment" tabindex="-1">Working on the site after deployment <a class="header-anchor" href="#working-on-the-site-after-deployment" aria-label="Permalink to &quot;Working on the site after deployment&quot;">​</a></h2><h3 id="adding-a-user-to-a-brand-new-site" tabindex="-1">Adding a user to a brand-new site <a class="header-anchor" href="#adding-a-user-to-a-brand-new-site" aria-label="Permalink to &quot;Adding a user to a brand-new site&quot;">​</a></h3><p>A newly-created site won&#39;t have much in the database yet, and <strong>you need an admin user to start editing</strong>.</p><ol><li><strong>Make sure you are on the <code>nodeapps</code> user</strong> (the non-sudo user). Any direct work on the Apostrophe site (as opposed to the server) should be done by <code>nodeapps</code>.</li><li>Run the follow task to create a user with the name <code>lucy</code> to the &quot;admin&quot; group:</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@apostrophecms/user:add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lucy</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">admin</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># The command structure is:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># node app apostrophe-users:add userName groupName</span></span></code></pre></div><ol start="3"><li>When prompted, <strong>enter a secure password.</strong> And be sure to record it securely as well!</li></ol><p>After that your account will be stored in the MongoDB database. Access it on the <code>/login</code> page of your website.</p><h3 id="updating-your-site-code" tabindex="-1">Updating your site code <a class="header-anchor" href="#updating-your-site-code" aria-label="Permalink to &quot;Updating your site code&quot;">​</a></h3><p>To update your site later, follow these steps using the <code>nodeapps</code> (non-sudo) user:</p><ol><li><code>cd</code> to the project root if you are not there already. Since we first deployed our code by cloning a git repository, we&#39;ll pull from that repo to update the code.</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Make sure we&#39;re in our project root directory.</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a3-boilerplate</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Pull our code.</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span></span></code></pre></div><ol start="2"><li>Now that we have the code updated, we will install any new or updated npm packages, build new production assets, and run any new database migrations:</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@apostrophecms/migration:migrate</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In projects based on the <code>a3-boilerplate</code> code starter, the <code>npm run release</code> script takes care of all of this in one command. If your codebase does not include that script you will need to run each command directly.</p></div><ol start="3"><li>Instruct <code>pm2</code> to restart the site:</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pm2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">restart</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a3-boilerplate</span></span></code></pre></div><p>Your site will restart after a few seconds. You can check the process logs with <code>pm2 logs a3-boilerplate</code> to see whether it has started up yet.</p><h3 id="viewing-the-node-js-console" tabindex="-1">Viewing the Node.js console <a class="header-anchor" href="#viewing-the-node-js-console" aria-label="Permalink to &quot;Viewing the Node.js console&quot;">​</a></h3><p>Your site&#39;s console log messages are available from <code>pm2</code>:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pm2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">logs</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a3-boilerplate</span></span></code></pre></div><h2 id="recommended-enhancements" tabindex="-1">Recommended enhancements <a class="header-anchor" href="#recommended-enhancements" aria-label="Permalink to &quot;Recommended enhancements&quot;">​</a></h2><p>This recipe is a simple, unopinionated production example. There are many things you can do to improve on this recipe.</p><h3 id="run-on-multiple-processes" tabindex="-1">Run on multiple processes <a class="header-anchor" href="#run-on-multiple-processes" aria-label="Permalink to &quot;Run on multiple processes&quot;">​</a></h3><p>One important step is to run at least two Apostrophe processes, in order to guarantee a second process can respond if the first has crashed and is restarting.</p><p>One way to do that is to start two separate processes with <code>pm2</code>, using two <code>--name</code> settings and two <code>PORT</code> environment variable settings, and configure <a href="https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/#choosing-a-load-balancing-method" target="_blank" rel="noreferrer">nginx round-robin load balancing</a> to balance between them.</p><p>If you need more capacity, you can run as many processes as you have CPU cores on the server, possibly reserving one for MongoDB.</p><h3 id="specify-the-apos-release-id-if-not-deploying-with-git" tabindex="-1">Specify the <code>APOS_RELEASE_ID</code> if not deploying with git <a class="header-anchor" href="#specify-the-apos-release-id-if-not-deploying-with-git" aria-label="Permalink to &quot;Specify the \`APOS_RELEASE_ID\` if not deploying with git&quot;">​</a></h3><p>Just a heads up: in this example, Apostrophe uses the current git commit ID to identify the current bundle of frontend assets.</p><p>If your preferred deployment process does not involve running <code>git clone</code> on the server, <strong>you&#39;ll need to set the <code>APOS_RELEASE_ID</code> environment variable to a consistent value of your own</strong> when running the asset build task <em>and</em> when starting up Apostrophe. Change that release ID value for both purposes <em>with each new deployment</em>.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">APOS_RELEASE_ID</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">myLatestReleaseID</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">APOS_RELEASE_ID</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">myLatestReleaseID</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">pm2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">restart</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a3-boilerplate</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Remember, a3-boilerplate is the name of the pm2 process from this example.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Replace that with the name of your pm2 process.</span></span></code></pre></div>`,65),l=[t];function p(r,c,i,d,u,h){return e(),o("div",null,l)}const g=s(n,[["render",p]]);export{C as __pageData,g as default};
