import{_ as d,K as t,o as s,c as h,O as a,w as l,k as e,a as o,$ as c}from"./chunks/framework.9fa1e75e.js";const k=JSON.parse('{"title":"@apostrophecms/i18n","description":"","frontmatter":{"extends":"@apostrophecms/module"},"headers":[],"relativePath":"reference/modules/i18n.md","filePath":"reference/modules/i18n.md","lastUpdated":1690289066000}'),p={name:"reference/modules/i18n.md"},m=e("h1",{id:"apostrophecms-i18n",tabindex:"-1"},[e("code",null,"@apostrophecms/i18n"),o(),e("a",{class:"header-anchor",href:"#apostrophecms-i18n","aria-label":'Permalink to "`@apostrophecms/i18n`"'},"​")],-1),u=e("p",null,[e("strong",null,"Alias:"),o(),e("code",null,"apos.i18n")],-1),f=c('<p>This module governs internationalization functionality and localization tools. Apostrophe projects will configure locales through <code>@apostrophecms/i18n</code>.</p><p>The module makes an instance of the <a href="https://npmjs.org/package/i18next" target="_blank" rel="noreferrer">i18next</a> npm module available in Nunjucks templates via the <code>__t()</code> helper function. That function is also available on <code>req</code> objects as <code>req.t()</code> and in user interface Vue.js components as <code>this.$t()</code>.</p><p><code>apos.i18n.i18next</code> can be used to directly access the <code>i18next</code> npm module instance if necessary. It usually is not necessary. Use <code>req.t</code> if you need to localize in a route.</p><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>defaultLocale</code></td><td>String</td><td>The locale that will be used by the UI and server rendering if no other is specified.</td></tr><tr><td><code>locales</code></td><td>Object</td><td>The set of <a href="./../glossary.html#locale">locales</a> to use in the application.</td></tr></tbody></table><h3 id="locales" tabindex="-1"><code>locales</code> <a class="header-anchor" href="#locales" aria-label="Permalink to &quot;`locales`&quot;">​</a></h3><p>The locale object should include one or more (usually two or more) locale configuration object. Each locale key is a short code, typically a two letter country code (e.g., <code>ca</code>), language code (<code>fr</code>), or one of each with a dash separating them (<code>fr-CA</code>). This local name is used to reference the locale throughout Apostrophe.</p><p>Each locale may have the following settings:</p><table><thead><tr><th>Locale setting</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>label</code></td><td>String</td><td>The human-readable label for the locale.</td></tr><tr><td><code>hostname</code></td><td>String</td><td>A hostname (e.g., &#39;example.net&#39;) that will trigger the locale to be shown.</td></tr><tr><td><code>prefix</code></td><td>String</td><td>A URL path prefix that will trigger the locale to be shown.</td></tr><tr><td><code>private</code></td><td>Boolean</td><td>Setting this to true exposes this locale to logged-in users only.</td></tr></tbody></table><p>Hostname and the path prefix are both factors in deciding what locale to display to visitors. There is prioritization that factors into identifying the correct one to use. The priority ranking for choosing the correct locale is:</p><ol><li>The locale has both <code>hostname</code> and <code>prefix</code> settings and the URL matches <em>both</em> settings.</li><li>The URL matches the locale&#39;s configured <code>hostname</code> and the locale has no <code>prefix</code></li><li>The URL matches the locale&#39;s configured <code>prefix</code> and the locale has no <code>hostname</code>.</li><li>The locale is the default locale (when no other locale matches).</li></ol><p>Other notes:</p><ul><li>Two or more locales may not be registered with the same <code>hostname</code> <em>and</em> the same path <code>prefix</code>. Apostrophe will throw an error in this case.</li><li>The <strong>default locale</strong> (either the <code>defaultLocale</code> setting or the first registered locale) does not need a <code>hostname</code> or path <code>prefix</code> setting.</li><li>If <em>any</em> locale has a <code>hostname</code> setting <em>one</em> of these must be true: <ol><li><strong>The Apostrophe app must have a <code>baseUrl</code> set in the <code>data/local.js</code> or similiar server configuration file</strong> (a best practice in most cases anyway) or set through the <code>APOS_BASE_URL</code> environment variable, OR</li><li><strong>All locales must have a hostname setting</strong> (even if several are the same, using different <code>prefix</code> settings).</li></ol></li><li>If the URL does not match any locale&#39;s set <code>hostname</code> or <code>prefix</code> (and all locales have one or both settings), Apostrophe will use the default locale.</li></ul><h4 id="project-configuration-example" tabindex="-1">Project configuration example <a class="header-anchor" href="#project-configuration-example" aria-label="Permalink to &quot;Project configuration example&quot;">​</a></h4>',14),g=c('<h2 id="related-documentation" tabindex="-1">Related documentation <a class="header-anchor" href="#related-documentation" aria-label="Permalink to &quot;Related documentation&quot;">​</a></h2><ul><li><a href="/guide/localization/static.html">Static localization guide</a></li><li><a href="/guide/localization/dynamic.html">Dynamic content localization guide</a></li></ul><h2 id="featured-methods" tabindex="-1">Featured methods <a class="header-anchor" href="#featured-methods" aria-label="Permalink to &quot;Featured methods&quot;">​</a></h2><p>The following methods belong to this module and may be useful in project-level code. See the <a href="https://github.com/apostrophecms/apostrophe/blob/main/modules/%40apostrophecms/i18n/index.js" target="_blank" rel="noreferrer">source code</a> for all methods that belong to this module.</p><h3 id="inferidlocaleandmode-req-id" tabindex="-1"><code>inferIdLocaleAndMode(req, _id)</code> <a class="header-anchor" href="#inferidlocaleandmode-req-id" aria-label="Permalink to &quot;`inferIdLocaleAndMode(req, _id)`&quot;">​</a></h3><p>Infer <code>req.locale</code> and <code>req.mode</code> from <code>_id</code> if they were not set already by explicit query parameters. Conversely, if the appropriate query parameters were set, rewrite <code>_id</code> accordingly. Returns <code>_id</code>, after rewriting if appropriate.</p><h3 id="isvalidlocale-locale" tabindex="-1"><code>isValidLocale(locale)</code> <a class="header-anchor" href="#isvalidlocale-locale" aria-label="Permalink to &quot;`isValidLocale(locale)`&quot;">​</a></h3><p>Given a locale name, this will return a boolean value indicating whether it is a locale configured for the Apostrophe website.</p><h3 id="matchlocale-req" tabindex="-1"><code>matchLocale(req)</code> <a class="header-anchor" href="#matchlocale-req" aria-label="Permalink to &quot;`matchLocale(req)`&quot;">​</a></h3><p>Return the best matching locale for the request based on the hostname and path prefix. If available the first locale matching both hostname and prefix is returned, otherwise the first matching locale that specifies only a hostname or only a prefix. If no matches are possible the default locale is returned.</p><h2 id="module-tasks" tabindex="-1">Module Tasks <a class="header-anchor" href="#module-tasks" aria-label="Permalink to &quot;Module Tasks&quot;">​</a></h2><h3 id="rename-locale" tabindex="-1"><code>rename-locale</code> <a class="header-anchor" href="#rename-locale" aria-label="Permalink to &quot;`rename-locale`&quot;">​</a></h3><p>The <code>rename-locale</code> command moves all content from one locale name to another, using the <code>--old</code> and <code>--new</code> options. Note that the value of <code>--new</code> should match a locale name that is currently configured by the @apostrophecms/i18n module. By default, any duplicate keys for content existing in both locales will stop the process. However you can specify which content to keep in the event of a duplicate key error using the <code>--keep=&lt;localename&gt;</code> option where <code>&lt;localname&gt;</code>is either the old or new locale.</p><p>Usage: <code>node app @apostrophecms/i18n:rename-locale --old=de-DE --new=de-de --keep=de-de</code></p>',14);function b(r,_,x,y,w,q){const n=t("AposRefExtends"),i=t("AposCodeBlock");return s(),h("div",null,[m,u,a(n,{module:r.$frontmatter.extends},null,8,["module"]),f,a(i,null,{caption:l(()=>[o(" /modules/@apostrophecms/i18n/index.js ")]),default:l(()=>[o(" ```javascript module.exports = { options: { defaultLocale: 'fr', locales: { fr: { label: 'French' }, 'en-CA': { label: 'Canada (English)', prefix: '/ca/en' }, 'fr-CA': { label: 'Canada (French)', prefix: '/ca/fr' }, 'es-MX': { label: 'Mexico', hostname: 'example.mx' } } } } ``` ")]),_:1}),g])}const v=d(p,[["render",b]]);export{k as __pageData,v as default};
