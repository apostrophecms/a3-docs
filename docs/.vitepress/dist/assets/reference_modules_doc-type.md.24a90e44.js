import{_ as c,K as o,o as l,c as h,O as d,w as a,k as e,a as t,$ as i}from"./chunks/framework.9fa1e75e.js";const w=JSON.parse('{"title":"@apostrophecms/doc-type","description":"","frontmatter":{"extends":"@apostrophecms/module"},"headers":[],"relativePath":"reference/modules/doc-type.md","filePath":"reference/modules/doc-type.md","lastUpdated":1690289066000}'),p={name:"reference/modules/doc-type.md"},u=e("h1",{id:"apostrophecms-doc-type",tabindex:"-1"},[e("code",null,"@apostrophecms/doc-type"),t(),e("a",{class:"header-anchor",href:"#apostrophecms-doc-type","aria-label":'Permalink to "`@apostrophecms/doc-type`"'},"​")],-1),f=i('<p>This module establishes the basic structure and functionality for all content documents, including pages and pieces. More specifically, it is the foundation for piece <em>types</em> and page <em>types</em>. The features below are available on all piece and page types except where they are overridden in the <code>@apostrophecms/piece-type</code> and <code>@apostrophecms/page-type</code> modules.</p><p>This module is almost never configured or extended directly in Apostrophe projects. The only reason to configure this module directly would be to apply the changes to <em>every</em> page type and piece type, including those Apostrophe core (e.g., <code>@apostrophecms/user</code>, <code>@apostrophecms/home-page</code>). Project-level doc types should extend either <code>@apostrophecms/piece-type</code> or <code>@apostrophecms/page-type</code> instead.</p><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><a href="#relateddocument"><code>relatedDocument</code></a></td><td>Boolean</td><td>Assign <code>true</code> on a doc-type module (almost always pieces) for those docs to be considered &quot;related documents&quot; in localization.</td></tr><tr><td><code>slugPrefix</code></td><td>String</td><td>A string Apostrophe should prepend to all slugs for a doc type. Only applicable to piece-type modules.</td></tr></tbody></table><h3 id="relateddocument" tabindex="-1"><code>relatedDocument</code> <a class="header-anchor" href="#relateddocument" aria-label="Permalink to &quot;`relatedDocument`&quot;">​</a></h3><p>When editors localize content, syncing it from one locale to other locales, there is an option to also localize &quot;related documents&quot; (docs connected through <a href="/guide/relationships.html">relationship fields</a>). If this option is <code>true</code>, the type is selected by default for localization when related to a piece or page being localized. This is the default setting for <code>@apostrophecms/image</code> and <code>@apostrophecms/file</code>.</p><p>If this option is <code>null</code>, the type is offered for localization when related to a piece or page being localized, but not selected by default. This is the default setting for all other piece types.</p><p>If this option is <code>false</code>, the type is <em>never</em> offered for localization when related to a piece or page being localized. This is the default setting for <code>@apostrophecms/page-type</code>.</p><h3 id="slugprefix" tabindex="-1"><code>slugPrefix</code> <a class="header-anchor" href="#slugprefix" aria-label="Permalink to &quot;`slugPrefix`&quot;">​</a></h3><p>Document slugs, the <code>slug</code> property of content documents, must be unique within a database. Apostrophe will enforce this by adding numbers to the end of a duplicate slug when needed (e.g., <code>some-slug-0</code>). Registering a prefix for a piece type&#39;s slugs with <code>slugPrefix</code> is another way to prevent duplicate slugs across different piece types and also avoid the appended numbers. This should not be used for page types.</p><p>For example, the <code>@apostrophecms/image</code> module uses the <code>image-</code> slug prefix. Image document slugs are not as important as event slugs, so adding the prefix prevents an image from reserving a slug both might have used. An image with filename <code>2021-company-retreat.jpg</code> would otherwise have tried to have the same auto-generated slug as an event titled &quot;2021 Company Retreat.&quot;</p><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h4>',12),m=i('<h2 id="related-documentation" tabindex="-1">Related documentation <a class="header-anchor" href="#related-documentation" aria-label="Permalink to &quot;Related documentation&quot;">​</a></h2><ul><li><a href="/reference/glossary.html#doc">Content document definition</a></li></ul><h2 id="featured-methods" tabindex="-1">Featured methods <a class="header-anchor" href="#featured-methods" aria-label="Permalink to &quot;Featured methods&quot;">​</a></h2><p>The following methods belong to this module and may be useful in project-level code. See the <a href="https://github.com/apostrophecms/apostrophe/blob/main/modules/%40apostrophecms/doc-type/index.js" target="_blank" rel="noreferrer">source code</a> for all methods that belong to this module.</p><p>This module is meant as a base class for more specific content modules. As such, the methods should be used from those content modules, not directly from this one.</p><h3 id="allowedschema-req" tabindex="-1"><code>allowedSchema(req)</code> <a class="header-anchor" href="#allowedschema-req" aria-label="Permalink to &quot;`allowedSchema(req)`&quot;">​</a></h3><p>Returns a new version of the doc type&#39;s schema containing only fields that the current user (<code>req.user</code>) has permission to edit.</p><h3 id="async-convert-req-input-doc-options" tabindex="-1"><code>async convert(req, input, doc, options)</code> <a class="header-anchor" href="#async-convert-req-input-doc-options" aria-label="Permalink to &quot;`async convert(req, input, doc, options)`&quot;">​</a></h3><p>Process untrusted data supplied in an <code>input</code> object using the doc type&#39;s schema and update the <code>doc</code> object accordingly. This does not save anything to the database by itself.</p><p>If <code>options.presentFieldsOnly</code> is <code>true</code>, only fields that exist in <code>input</code> are affected. The default is <code>false</code>, which applies default values to any fields not already in <code>input</code>. To intentionally erase a field&#39;s contents when this option is present, use <code>null</code> for that input field or another representation appropriate to the type (an empty string for a string field).</p><p>If <code>options.copyingId</code> is present and assigned to a document <code>_id</code>, the doc with the given ID is fetched and used as the default values for any schema fields not defined in <code>input</code>. This overrides <code>presentFieldsOnly</code> as long as the fields in question exist in the doc being copied. The <code>_id</code> of the copied doc is added as the <code>copyOfId</code> property of the <code>doc</code> object.</p><h3 id="fieldspresent-input" tabindex="-1"><code>fieldsPresent(input)</code> <a class="header-anchor" href="#fieldspresent-input" aria-label="Permalink to &quot;`fieldsPresent(input)`&quot;">​</a></h3><p>Returns an array with the names of all doc type schema fields present in the <code>input</code> object.</p><h3 id="async-find-req-criteria-builders" tabindex="-1"><code>async find(req, criteria, builders)</code> <a class="header-anchor" href="#async-find-req-criteria-builders" aria-label="Permalink to &quot;`async find(req, criteria, builders)`&quot;">​</a></h3><p>The <code>find()</code> method initiates a database query. Learn more about initiating queries <a href="/guide/database-queries.html#initiating-the-data-query">in the database query guide</a>. This method takes three arguments:</p><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>req</code></td><td>Object</td><td>The associated request object. Using a provided <code>req</code> object is important for maintaining user role permissions.</td></tr><tr><td><code>criteria</code></td><td>Object</td><td>A <a href="https://docs.mongodb.com/manual/tutorial/query-documents/" target="_blank" rel="noreferrer">MongoDB criteria object</a>. It is often as simple as properties that match schema field names assigned to the desired value.</td></tr><tr><td><code>builders</code></td><td>Object</td><td>The builders object is converted to matching <a href="/reference/query-builders.html">query builders</a>.</td></tr></tbody></table><h3 id="findforediting-req-criteria-builders" tabindex="-1"><code>findForEditing(req, criteria, builders)</code> <a class="header-anchor" href="#findforediting-req-criteria-builders" aria-label="Permalink to &quot;`findForEditing(req, criteria, builders)`&quot;">​</a></h3><p>Returns a query that finds documents the current user (based on the <code>req</code> request object) can edit. Unlike <code>find()</code>, this query defaults to including docs in the archive.</p><p><code>criteria</code> is a MongoDB criteria object as in <code>find()</code>. The <code>builders</code> argument should be an object of query builders, in the same style as the <a href="#builders">module option of the same name</a>.</p><h3 id="async-findoneforediting-req-criteria-builders" tabindex="-1"><code>async findOneForEditing(req, criteria, builders)</code> <a class="header-anchor" href="#async-findoneforediting-req-criteria-builders" aria-label="Permalink to &quot;`async findOneForEditing(req, criteria, builders)`&quot;">​</a></h3><p><code>findOneForEditing()</code> is wrapper for <code>findForEditing()</code> that returns a single document matching the arguments, not simply a query.</p><h3 id="inferidlocaleandmode-req-id" tabindex="-1"><code>inferIdLocaleAndMode(req, _id)</code> <a class="header-anchor" href="#inferidlocaleandmode-req-id" aria-label="Permalink to &quot;`inferIdLocaleAndMode(req, _id)`&quot;">​</a></h3><p>This method is a wrapper for the <code>@apostrophecms/i18n</code> module <a href="/reference/modules/i18n.html##inferidlocaleandmode-req-id">method of the same name</a>. If the doc type is a piece type that is not localized, this will simply return the <code>_id</code>.</p><h3 id="async-ismodified-req-doc" tabindex="-1"><code>async isModified(req, doc)</code> <a class="header-anchor" href="#async-ismodified-req-doc" aria-label="Permalink to &quot;`async isModified(req, doc)`&quot;">​</a></h3><p>Returns <code>true</code> if the provided draft (<code>doc</code>) has been modified from the published version of the same document. If the draft has no published version it is always considered modified.</p><p>For convenience, you may also pass the published document version as <code>doc</code>. In this case the draft version is found and compared to the provided published version.</p><h3 id="newinstance" tabindex="-1"><code>newInstance()</code> <a class="header-anchor" href="#newinstance" aria-label="Permalink to &quot;`newInstance()`&quot;">​</a></h3><p>This method returns an new document object with appropriate default values for the doc type&#39;s schema fields. This is useful as a starting point for programmatically constructed documents.</p><h3 id="async-publish-req-draft-options" tabindex="-1"><code>async publish(req, draft, options)</code> <a class="header-anchor" href="#async-publish-req-draft-options" aria-label="Permalink to &quot;`async publish(req, draft, options)`&quot;">​</a></h3><p>When passed a <code>req</code> object and <em>draft</em> document object (<code>draft</code>), this method will publish the draft. This replaces an existing published version of the document, if there is one. It returns the draft doc with the <code>lastPublishedAt</code> and <code>modified</code> properties updated.</p><p>If <code>options.permissions</code> is explicitly set to <code>false</code>, permissions checks are bypassed. If <code>options.autopublishing</code> is true, then the <code>edit</code> permission is sufficient, otherwise the <code>publish</code> permission is checked for.</p><h3 id="async-revertdrafttopublished-req-draft-options" tabindex="-1"><code>async revertDraftToPublished(req, draft, options)</code> <a class="header-anchor" href="#async-revertdrafttopublished-req-draft-options" aria-label="Permalink to &quot;`async revertDraftToPublished(req, draft, options)`&quot;">​</a></h3><p>Reverts the given draft document (<code>draft</code>) to the most recent publication, clearing any changes. It returns the draft&#39;s new value, or <code>false</code> if the draft was not modified from the published version or no published version exists yet.</p><p>If the <code>options</code> object contains an <code>overrides</code> object, properties of the <code>overrides</code> object will be applied to the draft document before it is updated in the database.</p><p>Emits the <a href="/reference/server-events.html#afterrevertdrafttopublished"><code>afterRevertDraftToPublished</code> event</a> before returning, which includes a payload object containing the draft document.</p><h3 id="async-revertpublishedtoprevious-req-published" tabindex="-1"><code>async revertPublishedToPrevious(req, published)</code> <a class="header-anchor" href="#async-revertpublishedtoprevious-req-published" aria-label="Permalink to &quot;`async revertPublishedToPrevious(req, published)`&quot;">​</a></h3><p>Reverts a published document (<code>published</code>) to the previous published state and returns the updated published state. If this was already done (only one previous state is saved) or there is no previous publication, it throws an <code>invalid</code> exception.</p><p>Emits the <a href="/reference/server-events.html#afterrevertpublishedtoprevious"><code>afterRevertPublishedToPrevious</code> event</a> before returning, which includes a payload object containing the published document.</p>',38);function b(r,y,g,q,v,x){const s=o("AposRefExtends"),n=o("AposCodeBlock");return l(),h("div",null,[u,d(s,{module:r.$frontmatter.extends},null,8,["module"]),f,d(n,null,{caption:a(()=>[t(" modules/publication/index.js ")]),default:a(()=>[t(" ```javascript module.exports = { extend: '@apostrophecms/piece-type', options: { slugPrefix: 'pub-' }, // ... } ``` ")]),_:1}),m])}const P=c(p,[["render",b]]);export{w as __pageData,P as default};
