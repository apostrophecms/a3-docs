import{_ as i,K as n,o as d,c as p,O as a,w as t,k as e,a as o,$ as s}from"./chunks/framework.9fa1e75e.js";const h="/assets/group-menu.3638fbe5.png",k=JSON.parse('{"title":"@apostrophecms/admin-bar","description":"","frontmatter":{"extends":"@apostrophecms/module"},"headers":[],"relativePath":"reference/modules/admin-bar.md","filePath":"reference/modules/admin-bar.md","lastUpdated":1690289066000}'),m={name:"reference/modules/admin-bar.md"},u=e("h1",{id:"apostrophecms-admin-bar",tabindex:"-1"},[e("code",null,"@apostrophecms/admin-bar"),o(),e("a",{class:"header-anchor",href:"#apostrophecms-admin-bar","aria-label":'Permalink to "`@apostrophecms/admin-bar`"'},"​")],-1),y=e("p",null,[e("strong",null,"Alias:"),o(),e("code",null,"apos.adminBar")],-1),D=s('<p>This module implements Apostrophe&#39;s admin bar at the top of the page. Any module can register a button (or more than one) for the bar by calling this module&#39;s <code>add</code> method. Buttons can also be grouped into dropdown menus and restricted to those with particular permissions. The <a href="/reference/modules/piece-type.html">@apostrophecms/piece-type module</a> takes advantage of this module automatically.</p><h2 id="configuration-options" tabindex="-1">Configuration options <a class="header-anchor" href="#configuration-options" aria-label="Permalink to &quot;Configuration options&quot;">​</a></h2><p>Options are passed into the admin-bar module by creating a <code>modules/@apostrophecms/admin-bar/index.js</code> file in our project. Our project-specific configuration will merge gracefully with the defaults that come with the module.</p><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>groups</code></td><td>Array</td><td>Adds one or more menu item group objects to be displayed in dropdown menus</td></tr></tbody></table><h3 id="groups" tabindex="-1"><code>groups</code> <a class="header-anchor" href="#groups" aria-label="Permalink to &quot;`groups`&quot;">​</a></h3><p>The <code>groups</code> option takes an array of one or more objects that group several menu items together in the admin bar as a dropdown menu. Each of the <code>groups</code> objects requires a <code>label</code> and an array of menu <code>items</code>. The <code>label</code> will be used as the label displayed in the menu. The <code>items</code> array contains the names of the individual menu items you want to appear in the dropdown, entered in the order you want them to appear. Note: Menu names for <code>piece-type</code> items are the name of the piece-type, not the label. For core items, like &#39;Images&#39;, the name is prefixed - &#39;@apostrophecms/image&#39;.</p><p><strong>Example</strong></p>',7),F=e("div",{class:"language-javascript"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"javascript"),e("pre",{class:"shiki material-theme-palenight"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"module.exports"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#89DDFF"}},"="),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#89DDFF"}},"{")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#F07178"}},"options"),e("span",{style:{color:"#89DDFF"}},":"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#89DDFF"}},"{")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"   "),e("span",{style:{color:"#F07178"}},"groups"),e("span",{style:{color:"#89DDFF"}},":"),e("span",{style:{color:"#A6ACCD"}}," [")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"     "),e("span",{style:{color:"#89DDFF"}},"{")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"       "),e("span",{style:{color:"#F07178"}},"name"),e("span",{style:{color:"#89DDFF"}},":"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#89DDFF"}},"'"),e("span",{style:{color:"#C3E88D"}},"media"),e("span",{style:{color:"#89DDFF"}},"'"),e("span",{style:{color:"#89DDFF"}},",")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"       "),e("span",{style:{color:"#F07178"}},"label"),e("span",{style:{color:"#89DDFF"}},":"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#89DDFF"}},"'"),e("span",{style:{color:"#C3E88D"}},"Media"),e("span",{style:{color:"#89DDFF"}},"'"),e("span",{style:{color:"#89DDFF"}},",")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"       "),e("span",{style:{color:"#F07178"}},"items"),e("span",{style:{color:"#89DDFF"}},":"),e("span",{style:{color:"#A6ACCD"}}," [")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"         "),e("span",{style:{color:"#89DDFF"}},"'"),e("span",{style:{color:"#C3E88D"}},"@apostrophecms/image"),e("span",{style:{color:"#89DDFF"}},"'"),e("span",{style:{color:"#89DDFF"}},",")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"         "),e("span",{style:{color:"#89DDFF"}},"'"),e("span",{style:{color:"#C3E88D"}},"@apostrophecms/file"),e("span",{style:{color:"#89DDFF"}},"'"),e("span",{style:{color:"#89DDFF"}},",")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"         "),e("span",{style:{color:"#89DDFF"}},"'"),e("span",{style:{color:"#C3E88D"}},"@apostrophecms/image-tag"),e("span",{style:{color:"#89DDFF"}},"'"),e("span",{style:{color:"#89DDFF"}},",")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"         "),e("span",{style:{color:"#89DDFF"}},"'"),e("span",{style:{color:"#C3E88D"}},"@apostrophecms/file-tag"),e("span",{style:{color:"#89DDFF"}},"'")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"       ]")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"     "),e("span",{style:{color:"#89DDFF"}},"}")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}},"   ]")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#89DDFF"}},"}")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"};")])])])],-1),b=s('<p>This will result in grouping those four core modules into a single dropdown menu displayed as &#39;Media&#39; on the menu bar. <img src="'+h+'" alt="ApostropheCMS admin bar with open dropdown menu titled &#39;Media&#39;"></p><h2 id="featured-methods" tabindex="-1">Featured methods <a class="header-anchor" href="#featured-methods" aria-label="Permalink to &quot;Featured methods&quot;">​</a></h2><p>The following method belongs to this module and may be useful in project-level code. See the <a href="https://github.com/apostrophecms/apostrophe/blob/main/modules/%40apostrophecms/admin-bar/index.js" target="_blank" rel="noreferrer">source code</a> for all methods that belong to this module.</p><p>Because this module has an alias, you can call these from another module from the alias path. For example, <code>self.apos.adminBar.add()</code>.</p><h3 id="add-name-label-permission-options" tabindex="-1"><code>add(name, label, permission, options)</code> <a class="header-anchor" href="#add-name-label-permission-options" aria-label="Permalink to &quot;`add(name, label, permission, options)`&quot;">​</a></h3><p>Add an item to the menu bar.</p><p>The <code>name</code> for the item must be unique within the menu bar to avoid conflicts. When the menu item is clicked, the <code>name</code> argument will be emitted on <code>apos.bus</code> as the value of an <code>admin-menu-click</code> event. If this item controls a specific modal, this will be caught by <code>TheAposModals</code> to display the correct modal. If this is the case, <code>name</code> should be the module name with a <code>:editor</code> or <code>:manager</code> suffix. For example, <code>@apostrophecms/global:editor</code>. A more complex example is contained within the <a href="https://github.com/apostrophecms/apostrophe/blob/main/modules/%40apostrophecms/login/ui/apos/apps/AposLogin.js" target="_blank" rel="noreferrer"><code>@apostrophecms/login</code> module</a>.</p><p><strong>Example</strong></p><p>Code added to handle click events on the new button in the admin UI frontend:</p>',9),f=e("div",{class:"language-javascript"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"javascript"),e("pre",{class:"shiki material-theme-palenight"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#89DDFF","font-style":"italic"}},"export"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#89DDFF","font-style":"italic"}},"default"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#89DDFF"}},"()"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#C792EA"}},"=>"),e("span",{style:{color:"#A6ACCD"}}," "),e("span",{style:{color:"#89DDFF"}},"{")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"  "),e("span",{style:{color:"#A6ACCD"}},"apos"),e("span",{style:{color:"#89DDFF"}},"."),e("span",{style:{color:"#A6ACCD"}},"bus"),e("span",{style:{color:"#89DDFF"}},"."),e("span",{style:{color:"#82AAFF"}},"$on"),e("span",{style:{color:"#F07178"}},"("),e("span",{style:{color:"#89DDFF"}},"'"),e("span",{style:{color:"#C3E88D"}},"admin-menu-click"),e("span",{style:{color:"#89DDFF"}},"'"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#C792EA"}},"async"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#A6ACCD","font-style":"italic"}},"item"),e("span",{style:{color:"#89DDFF"}},")"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#C792EA"}},"=>"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"{")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"    "),e("span",{style:{color:"#676E95","font-style":"italic"}},"// Make sure it is the button we care about, leave others to their own handlers")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#89DDFF","font-style":"italic"}},"if"),e("span",{style:{color:"#F07178"}}," ("),e("span",{style:{color:"#A6ACCD"}},"item"),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"!=="),e("span",{style:{color:"#F07178"}}," "),e("span",{style:{color:"#89DDFF"}},"'"),e("span",{style:{color:"#C3E88D"}},"myCustomModule"),e("span",{style:{color:"#89DDFF"}},"'"),e("span",{style:{color:"#F07178"}},") "),e("span",{style:{color:"#89DDFF"}},"{")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"      "),e("span",{style:{color:"#89DDFF","font-style":"italic"}},"return"),e("span",{style:{color:"#89DDFF"}},";")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"    "),e("span",{style:{color:"#89DDFF"}},"}")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"    "),e("span",{style:{color:"#676E95","font-style":"italic"}},"// Custom code for button action")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#F07178"}},"  "),e("span",{style:{color:"#89DDFF"}},"}"),e("span",{style:{color:"#F07178"}},")"),e("span",{style:{color:"#89DDFF"}},";")]),o(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF"}},"}")])])])],-1),g=s('<div class="info custom-block"><p class="custom-block-title">INFO</p><p>Make sure to add this to the <code>ui/apos/apps/</code> folder, or import it into a file located there. If you try to load this code by adding it to <code>ui/src</code> you will get an error in the console because the admin functions won&#39;t be available, yet.</p></div><p>The <code>label</code> will be the name displayed for the button on the menu bar.</p><p><code>permission</code> is optional and takes an object with <code>action</code> and <code>type</code> properties. If no permissions are present, anyone can see the button. The <code>action</code> property dictates what type of action the button will perform. These include <code>view</code>, <code>view-draft</code>, <code>edit</code>, <code>publish</code>, <code>upload-attachment</code>, and <code>delete</code>. The <code>type</code> property matches the name of the module the button is managing. This type must have a registered manager.</p><p><code>options</code> can take several properties that control the positioning and display of the new menu item.</p><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>last</code></td><td>Boolean</td><td>If truthy, it will cause the button to be displayed at the end of the list.</td></tr><tr><td><code>contextUtility</code></td><td>Boolean</td><td>If truthy, it will cause the button to be displayed in the tray of icons to the left of the page settings gear.</td></tr><tr><td><code>icon</code></td><td>String</td><td>If <code>contextUtility</code> is <code>true</code> an icon name is required for display.</td></tr><tr><td><code>toggle</code></td><td>Boolean</td><td>If truthy, the button will remain active until it is clicked a second time.</td></tr><tr><td><code>tooltip</code></td><td>Object || String</td><td>Depending on the <code>toggle</code> value, a tooltip string or an object with <code>activated</code> and <code>deactivated</code> strings.</td></tr></tbody></table><h3 id="last" tabindex="-1"><code>last</code> <a class="header-anchor" href="#last" aria-label="Permalink to &quot;`last`&quot;">​</a></h3><p>If the <code>last</code> property is set to ‘true’, the button will be displayed as the last item in the left list of buttons. Note: If more than one button has this property, the last one loaded will win.</p><h3 id="contextutility" tabindex="-1"><code>contextUtility</code> <a class="header-anchor" href="#contextutility" aria-label="Permalink to &quot;`contextUtility`&quot;">​</a></h3><p>If the <code>contextUtility</code> property is set to <code>true</code>, the button will be displayed as an icon in the tray of icons to the left of the page settings gear.</p><h3 id="icon" tabindex="-1"><code>icon</code> <a class="header-anchor" href="#icon" aria-label="Permalink to &quot;`icon`&quot;">​</a></h3><p>For proper display when setting <code>contextUtility</code> to true, a property of <code>icon</code> set to the value of an existing icon must also be passed. More can be read about icons <a href="https://v3.docs.apostrophecms.org/reference/module-api/module-overview.html#icons" target="_blank" rel="noreferrer">here</a>. A list of the icons imported automatically by Apostrophe can be found in the <a href="https://github.com/apostrophecms/apostrophe/blob/main/modules/%40apostrophecms/asset/lib/globalIcons.js" target="_blank" rel="noreferrer">‘asset’ module in the ‘globalIcos.js’ file’ within the ‘lib’ folder</a>.</p><h3 id="toggle" tabindex="-1"><code>toggle</code> <a class="header-anchor" href="#toggle" aria-label="Permalink to &quot;`toggle`&quot;">​</a></h3><p>The <code>toggle</code> property is used in conjunction with <code>contextUtility</code>. If it set to <code>true</code> then the button will toggle between active and inactive states. This allows the addition of different tooltip text depending on state.</p><h3 id="tooltip" tabindex="-1"><code>tooltip</code> <a class="header-anchor" href="#tooltip" aria-label="Permalink to &quot;`tooltip`&quot;">​</a></h3><p>The <code>tooltip</code> property can take either a string or an object. If <code>toggle</code> is falsy, then the value of <code>tooltip</code> is a string to display on hover. If <code>toggle</code> is truthy, then <code>tooltip</code> takes an object with two arguments, <code>activate</code> and <code>deactivate</code>. Both properties accept string values with the former being displayed for the activated state and the later the deactivated state.</p>',15);function C(c,A,_,w,v,x){const r=n("AposRefExtends"),l=n("AposCodeBlock");return d(),p("div",null,[u,y,a(r,{module:c.$frontmatter.extends},null,8,["module"]),D,a(l,null,{caption:t(()=>[o(" modules/@apostrophecms/admin-bar/index.js ")]),default:t(()=>[F,o()]),_:1}),b,a(l,null,{caption:t(()=>[o(" /modules/myCustomModule/ui/apos/apps/CustomFunctions.js ")]),default:t(()=>[f,o()]),_:1}),g])}const I=i(m,[["render",C]]);export{k as __pageData,I as default};
