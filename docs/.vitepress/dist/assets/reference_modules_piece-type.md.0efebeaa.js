import{_ as o,K as t,o as n,c as l,O as p,k as e,a as c,$ as r}from"./chunks/framework.9fa1e75e.js";const A=JSON.parse('{"title":"@apostrophecms/piece-type","description":"","frontmatter":{"extends":"@apostrophecms/doc-type"},"headers":[],"relativePath":"reference/modules/piece-type.md","filePath":"reference/modules/piece-type.md","lastUpdated":1690289066000}'),i={name:"reference/modules/piece-type.md"},d=e("h1",{id:"apostrophecms-piece-type",tabindex:"-1"},[e("code",null,"@apostrophecms/piece-type"),c(),e("a",{class:"header-anchor",href:"#apostrophecms-piece-type","aria-label":'Permalink to "`@apostrophecms/piece-type`"'},"​")],-1),y=r(`<p>This module is the foundation for all <a href="/guide/pieces.html">piece types</a> in Apostrophe. It is not typically configured or referenced in project code directly since each piece type should be managed independently in most cases. For example, the options documented below would be configured on a custom piece type, e.g., <code>article</code>, rather this piece type base module.</p><p>The only reason to configure this module directly would be to apply the changes to <em>every</em> piece type, including those in Apostrophe core (e.g., <code>@apostrophecms/user</code>).</p><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><a href="#autopublish"><code>autopublish</code></a></td><td>Boolean</td><td>Set to <code>true</code> to publish all saved edits immediately.</td></tr><tr><td><a href="#cache"><code>cache</code></a></td><td>Object</td><td>Provides control over cache headers for the REST API.</td></tr><tr><td><a href="#label-for-doc-types"><code>label</code></a></td><td>String</td><td>The human-readable label for the doc type.</td></tr><tr><td><a href="#localized"><code>localized</code></a></td><td>Boolean</td><td>Set to <code>false</code> to exclude the doc type in the locale system.</td></tr><tr><td><a href="#perpage"><code>perPage</code></a></td><td>Integer</td><td>The number of pieces to include in a set of <code>GET</code> request results.</td></tr><tr><td><a href="#plurallabel"><code>pluralLabel</code></a></td><td>String</td><td>The plural readable label for the piece type.</td></tr><tr><td><a href="#publicapiprojection"><code>publicApiProjection</code></a></td><td>Object</td><td>Piece fields to make available via a public REST API route.</td></tr><tr><td><a href="#quickcreate"><code>quickCreate</code></a></td><td>Boolean</td><td>Set to <code>true</code> to add the piece type to the quick create menu.</td></tr><tr><td><a href="#searchable"><code>searchable</code></a></td><td>Boolean</td><td>Set to <code>false</code> to remove the piece type from search results.</td></tr><tr><td><code>showCreate</code></td><td>Boolean</td><td>Set to <code>false</code> to disable UI related to creating new pieces of that type.</td></tr><tr><td><code>showArchive</code></td><td>Boolean</td><td>Set to <code>false</code> to disable UI related to archiving pieces of that type.</td></tr><tr><td><code>showDiscardDraft</code></td><td>Boolean</td><td>Set to <code>false</code> to disable UI related to discarding draft pieces of that type.</td></tr><tr><td><code>showDismissSubmission</code></td><td>Boolean</td><td>Set to <code>false</code> to disable UI related to dismissing draft submissions for pieces of that type.</td></tr><tr><td><code>singleton</code></td><td>Boolean</td><td>Set to <code>true</code> to ensure that no one can create a new piece of that type. The global doc module uses this, as only one should ever exist.</td></tr><tr><td><a href="#sort"><code>sort</code></a></td><td>Object</td><td>The value for a piece type&#39;s default sort order query builder.</td></tr></tbody></table><h3 id="autopublish" tabindex="-1"><code>autopublish</code> <a class="header-anchor" href="#autopublish" aria-label="Permalink to &quot;\`autopublish\`&quot;">​</a></h3><p>Set <code>autopublish</code> to <code>true</code> to automatically publish any changes saved to docs of this type. There is then effectively no draft mode for this doc type, but there will be draft document versions in the database.</p><p>The core image and file modules use this option, for example. It eliminates the need for users to think about the distinction between draft and published content while preserving the possibility of translation for different locales.</p><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// modules/article-category/index.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">extend</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@apostrophecms/piece-type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">autopublish</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="cache" tabindex="-1"><code>cache</code> <a class="header-anchor" href="#cache" aria-label="Permalink to &quot;\`cache\`&quot;">​</a></h3><p><code>cache</code> can be set to an object with an <code>api</code> subproperty, and a <code>maxAge</code> subproperty within that, determining the cache lifetime in seconds. If enabled, Apostrophe will send a <code>Cache-Control</code> header with the specified maximum age. The actual caching is provided by the browser, or by an intermediate CDN or reverse proxy.</p><p>Note that Apostrophe already provides &quot;cache on demand&quot; by default, to improve performance when simultaneous <code>GET</code> requests arrive for the same piece. Unlike &quot;cache on demand,&quot; setting the <code>cache</code> option introduces the possibility that some visitors will see older content, up to the specified lifetime.</p><p>If a user is logged in, or <code>req.session</code> has content, Apostrophe always disables caching. However such a user could encounter a previously cached document from before logging in. Apostrophe contains logic to mitigate this in the editing experience.</p><h4 id="example-1" tabindex="-1">Example <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cache</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">api</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// Specified in seconds</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">maxAge</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3000</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="label" tabindex="-1"><code>label</code> <a class="header-anchor" href="#label" aria-label="Permalink to &quot;\`label\`&quot;">​</a></h3><p><code>label</code> should be set to a text string to be used in user interface elements related to this doc type. This includes buttons to open piece manager modals.</p><p>If not set, Apostrophe will convert the module name to a readable label by splitting the <code>name</code> property on dashes and underscores, then capitalizing the first letter of each word.</p><h4 id="example-2" tabindex="-1">Example <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// modules/feature/index.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">extend</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@apostrophecms/piece-type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Featured Article</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="localized" tabindex="-1"><code>localized</code> <a class="header-anchor" href="#localized" aria-label="Permalink to &quot;\`localized\`&quot;">​</a></h3><p>Defaults to <code>true</code>. If set to <code>false</code>, this doc type will <em>not</em> be included in the locale system. This means there will be only one version of each doc, regardless of whether multiple locales (e.g., for languages or regions) are active. There is no distinction between draft and published, including in the database.</p><p>The &quot;users&quot; piece type disables localization in this way. It can also be useful for piece types that are synchronized from another system that has no notion of locales and no distinction between &quot;draft&quot; and &quot;published&quot; content.</p><h4 id="example-3" tabindex="-1">Example <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// modules/administrative-category/index.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">extend</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@apostrophecms/piece-type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">localized</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="perpage" tabindex="-1"><code>perPage</code> <a class="header-anchor" href="#perpage" aria-label="Permalink to &quot;\`perPage\`&quot;">​</a></h3><p>In piece types, the <code>perPage</code> option, expressed as an integer, sets the number of pieces that will be returned in each &quot;page&quot; <a href="/reference/api/pieces.html#get-api-v1-piece-name">during <code>GET</code> requests</a> that don&#39;t specify an <code>_id</code>. It also controls how many are displayed in the manager modal user interface. This value defaults to 10.</p><h4 id="example-4" tabindex="-1">Example <a class="header-anchor" href="#example-4" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// modules/article/index.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">extend</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@apostrophecms/piece-type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">perPage</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// REST \`GET\` requests will return 20 pieces per page.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="plurallabel" tabindex="-1"><code>pluralLabel</code> <a class="header-anchor" href="#plurallabel" aria-label="Permalink to &quot;\`pluralLabel\`&quot;">​</a></h3><p>Similar to <code>label</code> for all doc types, the <code>pluralLabel</code> option sets the string the user interface will use to describe a piece type in plural contexts.</p><p>If no <code>pluralLabel</code> value is provided, Apostrophe will append the <code>label</code> (whether set manually or generated <a href="#label">as described</a>), with &quot;s&quot;, as is typical for English words. <strong>Even in English this is often not correct, so <code>pluralLabel</code> should usually be defined explicitly.</strong></p><h4 id="example-5" tabindex="-1">Example <a class="header-anchor" href="#example-5" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// modules/goose/index.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">extend</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@apostrophecms/piece-type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Goose</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">pluralLabel</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Geese</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="publicapiprojection" tabindex="-1"><code>publicApiProjection</code> <a class="header-anchor" href="#publicapiprojection" aria-label="Permalink to &quot;\`publicApiProjection\`&quot;">​</a></h3><p>By default the built-in Apostrophe REST APIs are not accessible without proper <a href="/reference/api/authentication.html">authentication</a>. You can set an exception to this for <code>GET</code> requests to return specific document properties with the <code>publicApiProjection</code> option.</p><p>This should be set to an object containing individual field name keys set to <code>1</code> for their values. Those fields names included in the <code>publicApiProjection</code> object will be returned when the <code>GET</code> API requests are made without authentication.</p><h4 id="example-6" tabindex="-1">Example <a class="header-anchor" href="#example-6" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// modules/article/index.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">extend</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@apostrophecms/piece-type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">publicApiProjection</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">authorName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">_url</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 👈 Dynamic properties are allowed</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Unauthenticated <a href="/reference/api/pieces.html#get-api-v1-piece-name"><code>GET /api/v1/article</code></a> requests would return each piece with only the <code>title</code>, <code>authorName</code>, and <code>_url</code> properties.</p><h3 id="quickcreate" tabindex="-1"><code>quickCreate</code> <a class="header-anchor" href="#quickcreate" aria-label="Permalink to &quot;\`quickCreate\`&quot;">​</a></h3><p>Setting <code>quickCreate: true</code> on a piece adds that piece type to the admin bar &quot;quick create&quot; menu. The Apostrophe admin bar user interface includes the quick create menu button to add new pieces without first opening their respective manager modals.</p><h4 id="example-7" tabindex="-1">Example <a class="header-anchor" href="#example-7" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// modules/article/index.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">extend</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@apostrophecms/piece-type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">quickCreate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="searchable" tabindex="-1"><code>searchable</code> <a class="header-anchor" href="#searchable" aria-label="Permalink to &quot;\`searchable\`&quot;">​</a></h3><p>Setting <code>searchable: false</code> on a piece type will exclude that piece type from the results in Apostrophe&#39;s built-in search.</p><h4 id="example-8" tabindex="-1">Example <a class="header-anchor" href="#example-8" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// modules/article/index.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">extend</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@apostrophecms/piece-type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">searchable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="sort" tabindex="-1"><code>sort</code> <a class="header-anchor" href="#sort" aria-label="Permalink to &quot;\`sort\`&quot;">​</a></h3><p>The <code>sort</code> option for a doc type defines a sorting order for requests to the database for that type. The option is set to an object containing field name keys with <code>1</code> as a property value for ascending order and <code>-1</code> for descending order.</p><p>The default sort for all doc types is <code>{ updatedAt: -1 }</code>, meaning it returns documents based on the <code>updatedAt</code> property (the date and time of the last update) in descending order. The <code>sort</code> object can have multiple keys for more specific sorting.</p><h4 id="example-9" tabindex="-1">Example <a class="header-anchor" href="#example-9" aria-label="Permalink to &quot;Example&quot;">​</a></h4><p>This <code>sort</code> setting will return articles first based on a custom <code>priority</code> field in ascending order, then by the core <code>updatedAt</code> property in descending order.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// modules/article/index.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">extend</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@apostrophecms/piece-type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">sort</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">priority</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">updatedAt</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">fields</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">add</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">priority</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">integer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">min</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">max</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="related-documentation" tabindex="-1">Related documentation <a class="header-anchor" href="#related-documentation" aria-label="Permalink to &quot;Related documentation&quot;">​</a></h2><ul><li><a href="/guide/pieces.html">Pieces guide</a></li><li><a href="/reference/api/pieces.html">Pieces REST API</a></li></ul><h2 id="featured-methods" tabindex="-1">Featured methods <a class="header-anchor" href="#featured-methods" aria-label="Permalink to &quot;Featured methods&quot;">​</a></h2><p>The following methods belong to this module and may be useful in project-level code. See the <a href="https://github.com/apostrophecms/apostrophe/blob/main/modules/%40apostrophecms/piece-type/index.js" target="_blank" rel="noreferrer">source code</a> for all methods that belong to this module.</p><p>This module is meant as a base class for more specific content modules. As such, the methods should be used from those content modules, not directly from this one.</p><h3 id="async-find-req-criteria-builders" tabindex="-1"><code>async find(req, criteria, builders)</code> <a class="header-anchor" href="#async-find-req-criteria-builders" aria-label="Permalink to &quot;\`async find(req, criteria, builders)\`&quot;">​</a></h3><p>The <code>find()</code> method initiates a database query. Learn more about initiating queries <a href="/guide/database-queries.html#initiating-the-data-query">in the database query guide</a>. This method takes three arguments:</p><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>req</code></td><td>Object</td><td>The associated request object. Using a provided <code>req</code> object is important for maintaining user role permissions.</td></tr><tr><td><code>criteria</code></td><td>Object</td><td>A <a href="https://docs.mongodb.com/manual/tutorial/query-documents/" target="_blank" rel="noreferrer">MongoDB criteria object</a>. It is often as simple as properties that match schema field names assigned to the desired value.</td></tr><tr><td><code>builders</code></td><td>Object</td><td>The builders object is converted to matching <a href="/reference/query-builders.html">query builders</a>.</td></tr></tbody></table><h3 id="async-insert-req-piece-options" tabindex="-1"><code>async insert(req, piece, options)</code> <a class="header-anchor" href="#async-insert-req-piece-options" aria-label="Permalink to &quot;\`async insert(req, piece, options)\`&quot;">​</a></h3><p>The <code>insert()</code> method is used to add a new piece in server-side code. See the <a href="/guide/database-insert-update.html#inserting-a-new-piece">guide for inserting documents in code</a> for more on this.</p><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>req</code></td><td>Object</td><td>The associated request object. Using a provided <code>req</code> object is important for maintaining user role permissions.</td></tr><tr><td><code>piece</code></td><td>Object</td><td>The piece document object.</td></tr><tr><td><code>options</code></td><td>Object</td><td>An options object. Setting <code>permissions: false</code> will bypass all permission checks.</td></tr></tbody></table><h3 id="async-update-req-piece-options" tabindex="-1"><code>async update(req, piece, options)</code> <a class="header-anchor" href="#async-update-req-piece-options" aria-label="Permalink to &quot;\`async update(req, piece, options)\`&quot;">​</a></h3><p>The <code>update()</code> is used to update data for an existing piece. Note that the second argument must be a <em>complete piece object</em> to replace the existing one. You will typically use <a href="#async-find-req-criteria-options"><code>find()</code></a> to get the existing document object, alter that, then pass it into this method. See the <a href="/guide/database-insert-update.html#updating-content-documents">guide for updating pages in code</a> for more on this.</p><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>req</code></td><td>Object</td><td>The associated request object. Using a provided <code>req</code> object is important for maintaining user role permissions.</td></tr><tr><td><code>piece</code></td><td>Object</td><td>The document object that will <em>replace</em> the existing database document.</td></tr><tr><td><code>options</code></td><td>Object</td><td>An options object. Setting <code>permissions: false</code> will bypass all permission checks.</td></tr></tbody></table><h3 id="getbrowserdata-req" tabindex="-1"><code>getBrowserData(req)</code> <a class="header-anchor" href="#getbrowserdata-req" aria-label="Permalink to &quot;\`getBrowserData(req)\`&quot;">​</a></h3><p>Piece type modules&#39; implementation of <a href="./module.html#getbrowserdata-req"><code>getBrowserData</code></a>. This establishes the data that is used in the browser (including by the user interface). If adjusting this <strong>remember to <a href="/reference/module-api/module-overview.html#extendmethods-self"><em>extend</em> this method</a> rather than overwriting it</strong> to avoid breaking the UI.</p><h2 id="module-tasks" tabindex="-1">Module tasks <a class="header-anchor" href="#module-tasks" aria-label="Permalink to &quot;Module tasks&quot;">​</a></h2><h3 id="generate" tabindex="-1"><code>generate</code> <a class="header-anchor" href="#generate" aria-label="Permalink to &quot;\`generate\`&quot;">​</a></h3><p>Full command: <code>node app [piece-type name]:generate --total=[integer]</code></p><p>This task is used to generate sample documents for a given piece type. This can be helpful during project development to quickly create test content. The task will generate 10 items if the <code>--total</code> argument is <em>not</em> included. If <code>--total</code> is included with a number argument, it will generate that number of items.</p><p>For example, <code>node app article:generate --total=2000</code> will generate 2,000 documents for an <code>article</code> piece type.</p>`,75);function h(s,D,u,F,m,C){const a=t("AposRefExtends");return n(),l("div",null,[d,p(a,{module:s.$frontmatter.extends},null,8,["module"]),y])}const f=o(i,[["render",h]]);export{A as __pageData,f as default};
