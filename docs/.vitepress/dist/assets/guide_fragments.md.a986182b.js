import{_ as s,o as a,c as e,$ as n}from"./chunks/framework.9fa1e75e.js";const y=JSON.parse('{"title":"Template fragments","description":"","frontmatter":{"prev":{"text":"Template filters","link":"guide/template-filters.md"},"next":{"text":"Async Components","link":"guide/async-components.md"}},"headers":[],"relativePath":"guide/fragments.md","filePath":"guide/fragments.md","lastUpdated":1690289066000}'),t={name:"guide/fragments.md"},l=n(`<h1 id="template-fragments" tabindex="-1">Template fragments <a class="header-anchor" href="#template-fragments" aria-label="Permalink to &quot;Template fragments&quot;">â€‹</a></h1><p>We will often find that template code is reused across multiple files or that it simply gets overly complicated for a single file. <strong>Template fragments</strong> help solve this by splitting template code into smaller, managable pieces that can be used in other templates.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If you are already familiar with the <a href="https://mozilla.github.io/nunjucks/templating.html#macro" target="_blank" rel="noreferrer">Nunjucks macro</a> feature, fragments are very similar. Fragments are a new feature specific to Apostrophe to support asynchronous template tags, such as the <a href="/guide/areas-and-widgets.html#adding-areas-to-templates">area</a> tag and <a href="/guide/async-components.html">async components</a>. If the code does <em>not</em> use either async components or areas, macros are also fine to use.</p><p>The only macros feature currently unavailable or unreplaced for fragments is passing the template context using <code>with context</code>. This is planned for fragments as well.</p></div><h2 id="using-fragments" tabindex="-1">Using fragments <a class="header-anchor" href="#using-fragments" aria-label="Permalink to &quot;Using fragments&quot;">â€‹</a></h2><p>We define fragments by putting template markup between <code>{% fragment %}</code> and <code>{% endfragment %}</code> tags. The opening tag should also include a name for the fragment.</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{% fragment heading() %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">This is a heading fragment</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endfragment %}</span></span></code></pre></div><p>To use the fragment in a template, reference it by name using the <code>{% render %}</code> tag:</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{% render heading() %}</span></span>
<span class="line"><span style="color:#A6ACCD;">{# Renders: \`</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">This is a heading fragment</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">\` #}</span></span></code></pre></div><p>We can also pass arguments to fragments, allowing us to reuse them across templates with different data.</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{% fragment heading(adjective) %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">This is a {{ adjective }} fragment</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endfragment %}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{# ðŸ‘‡ Passing in a string argument #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% render heading(&#39;cool&#39;) %}</span></span></code></pre></div><p>Fragment arguments can be any data or template variables understood by Apostrophe templates (e.g., strings, objects, arrays, etc.). It can often be useful to pass a <a href="/reference/glossary.html#doc">doc object</a> to a macro to render its areas, especially when docs are referenced in <a href="/guide/relationships.html">relationships</a>.</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{% fragment authorCredit(author) %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">By {{ author.title }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    {% area author, &#39;photo&#39; %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endfragment %}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{# ðŸ‘‡ Passing in a piece object from a relationship field #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% render authorCredit(data.piece._author) %}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>It is possible to pass the entire <code>data</code> object into a fragment as an argument. That is usually excessive, however. It&#39;s generally a better idea to be more specific with what you pass into a fragment.</p></div><h2 id="importing-fragments-across-files" tabindex="-1">Importing fragments across files <a class="header-anchor" href="#importing-fragments-across-files" aria-label="Permalink to &quot;Importing fragments across files&quot;">â€‹</a></h2><p>The examples above simply render the fragments by name since they were defined in the same file. That can be useful sometimes, but it is more common to define fragments in different files from where they are used. This works very similarly to how template files are <a href="/guide/templating.html#referencing-templates-across-modules">extended or included</a> across files. In this case, we use the <code>{% import %}</code> tag.</p><h3 id="importing-within-the-same-module-or-the-root-views-directory" tabindex="-1">Importing within the same module or the root <code>views</code> directory <a class="header-anchor" href="#importing-within-the-same-module-or-the-root-views-directory" aria-label="Permalink to &quot;Importing within the same module or the root \`views\` directory&quot;">â€‹</a></h3><p>As when we <code>include</code> or <code>extend</code> another template file, when that file is in the project root <code>views</code> directory or from the same module as where we&#39;re working, we only need to name the file or relative file path.</p><p>For example, you might have an article <a href="/guide/piece-pages.html">index page</a> that lists a series of linked article titles with rich text teasers. The index page template itself would be at the path <code>modules/article-page/views/index.html</code>. You could separate the markup for each article in the listing into a fragment file, <code>modules/article-page/views/item-fragment.html</code>.</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{# modules/article-page/views/item-fragment.html #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{# ðŸ‘‡ Accepting an argument with the article data object #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% fragment teaser(article) %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">section</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ article.title }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    {% area article, &#39;teaser&#39; %}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{{ article._url }}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Read more</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">section</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endfragment %}</span></span></code></pre></div><p>Since the fragment and page template are both in the <code>article-page</code> module, we can import it with only the file name using the <code>{% import %}</code> template tag.</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{# modules/article-page/views/index.html #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% import &#39;item-fragment.html&#39; as articleFragment %}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{% for article in data.pieces %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  {# ðŸ‘‡ Rendering a heading and teaser for each article in the loop #}</span></span>
<span class="line"><span style="color:#A6ACCD;">  {% render articleFragment.teaser(article) %}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endfor %}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Unlike importing and extending templates, when importing, the fragment is a property of the imported file, e.g, <code>articleFragment.teaser()</code>. This allow us to define multiple fragments in a single file, then import the one file and use any inside it.</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{# modules/article-page/views/show.html #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% import &#39;fragments.html&#39; as articleFragments %}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ data.piece.title }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">{# Maybe one fragment in the file has author credit markup: #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% render articleFragments.author(data.piece._author) %}</span></span>
<span class="line"><span style="color:#A6ACCD;">{# And another handles the article topic tags: #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% render articleFragments.topicTags(data.piece.tags) %}</span></span></code></pre></div></div><p>Similarly, <strong>when fragment files are in the root-level <code>views</code> directory</strong> or a sub-directory of it, we can import the fragment with only the relative file path from that <code>views</code> directory.</p><p>The global fragment file:</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{# views/fragments/utilities.html #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% fragment heading(title) %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fancy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ title }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endfragment %}</span></span></code></pre></div><p>Importing the fragment into any page or widget template would look exactly as if the fragment was in the same module.</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{# In any page or widget template file #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% import &#39;fragments/utilities.html&#39; as utilities %}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{% render utilities.heading(&#39;Organization history&#39;) %}</span></span>
<span class="line"><span style="color:#A6ACCD;">{# Renders: \`</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fancy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Organization history</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">\` #}</span></span></code></pre></div><h3 id="importing-from-a-different-module" tabindex="-1">Importing from a different module <a class="header-anchor" href="#importing-from-a-different-module" aria-label="Permalink to &quot;Importing from a different module&quot;">â€‹</a></h3><p>To import template fragments from one module into templates of another module, include the fragment file&#39;s module name in the <code>import</code> tag. This is what it might look like to import the article teaser fragment from above into a <code>press-page</code> index page template:</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{# modules/press-page/views/index.html #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{# ðŸ‘‡ Importing our fragment from the \`article-page\` module #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% import &#39;article-page:item-fragment.html&#39; as importedFragment %}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{% for article in data.pieces %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  {% render importedFragment.teaser(article) %}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endfor %}</span></span></code></pre></div><p>In this case, the file name is prefixed with <code>article-page:</code>, indicating the source module for the template fragment.</p><h2 id="inserting-markup-with-rendercall" tabindex="-1">Inserting markup with <code>rendercall</code> <a class="header-anchor" href="#inserting-markup-with-rendercall" aria-label="Permalink to &quot;Inserting markup with \`rendercall\`&quot;">â€‹</a></h2><p>In addition to passing arguments, it is possible to pass markup directly from a template into a fragment it is using. The fragment must first include <code>rendercaller()</code>. This will be the location where the calling template will insert markup.</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{# /views/fragments/utilities.html #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% fragment highlighter %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">aside</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">highlight</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    {# ðŸ‘‡The inserted markup will slot in here, inside the \`aside\` tags. #}</span></span>
<span class="line"><span style="color:#A6ACCD;">    {{ rendercaller() }}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">aside</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endfragment %}</span></span></code></pre></div><p>When using the fragment, a template would use <code>{% rendercall %}</code> instead of <code>{% render %}</code>.</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{# modules/default-page/views/page.html #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% import &#39;fragments/utilities.html&#39; as utilities %}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{% rendercall utilities.highlighter() %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  Fun fact: {{ data.page.funFact }}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endrendercall %}</span></span></code></pre></div><p>This might render something like:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">aside</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">highlight</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  Fun fact: The first ever ice cream sundae was served in Two Rivers, Wisconsin in 1881.</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">aside</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div>`,38),o=[l];function p(r,i,c,d,m,g){return a(),e("div",null,o)}const D=s(t,[["render",p]]);export{y as __pageData,D as default};
