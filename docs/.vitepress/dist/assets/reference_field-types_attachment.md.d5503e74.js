import{_ as e,o as t,c as a,$ as o}from"./chunks/framework.9fa1e75e.js";const f=JSON.parse('{"title":"attachment","description":"","frontmatter":{},"headers":[],"relativePath":"reference/field-types/attachment.md","filePath":"reference/field-types/attachment.md","lastUpdated":1690289066000}'),s={name:"reference/field-types/attachment.md"},n=o('<h1 id="attachment" tabindex="-1"><code>attachment</code> <a class="header-anchor" href="#attachment" aria-label="Permalink to &quot;`attachment`&quot;">​</a></h1><p>An <code>attachment</code> field allows the user to upload a file to the server, or replace a file which was previously uploaded. Attachments are most often used indirectly through the core image  and file  piece types. Each of those piece types contains an attachment field and some metadata fields, making them a convenient way to reuse files.</p><p>You may also use attachment fields directly as well, however <strong>doing so means that the uploaded file will not be available in the media library or file manager</strong>. It will only be accessible as a property of the piece or page where it is uploaded. This can be appropriate for files that are only relevant for a single piece of content, such as resumes and job applications for a specific person.</p><h2 id="module-field-definition" tabindex="-1">Module field definition <a class="header-anchor" href="#module-field-definition" aria-label="Permalink to &quot;Module field definition&quot;">​</a></h2><p>All fields in a piece or page module use their object key as their database field name (e.g., <code>resume</code> below).</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Configuring the `resume` field in a module&#39;s `fields.add` subsection:</span></span>\n<span class="line"><span style="color:#FFCB6B;">resume</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">label</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Resume</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">attachment</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">fileGroup</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">office</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="settings" tabindex="-1">Settings <a class="header-anchor" href="#settings" aria-label="Permalink to &quot;Settings&quot;">​</a></h2><h3 id="required" tabindex="-1">Required <a class="header-anchor" href="#required" aria-label="Permalink to &quot;Required&quot;">​</a></h3><table><thead><tr><th>Property</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>label</code></td><td>String</td><td>n/a</td><td>Sets the visible label for the field in the UI</td></tr><tr><td><code>type</code></td><td>String</td><td>n/a</td><td>Specifies the field type (<code>attachment</code> for this type)</td></tr></tbody></table><h3 id="optional" tabindex="-1">Optional <a class="header-anchor" href="#optional" aria-label="Permalink to &quot;Optional&quot;">​</a></h3><table><thead><tr><th>Property</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>fileGroup</code></td><td>String</td><td>n/a</td><td>Can be set to the default <code>images</code> or <code>office</code> groups, or a custom group, to limit the file types that can be uploaded. See more below.</td></tr><tr><td><code>help</code></td><td>String</td><td>n/a</td><td>Help text for the content editor</td></tr><tr><td><code>htmlHelp</code></td><td>String</td><td>n/a</td><td>Help text with support for HTML markup</td></tr><tr><td><code>if</code></td><td>Object</td><td><code>{}</code></td><td>Conditions to meet before the field is active. <a href="/guide/conditional-fields.html">See the guide for details.</a></td></tr><tr><td><code>required</code></td><td>Boolean</td><td><code>false</code></td><td>If <code>true</code>, the field is mandatory</td></tr><tr><td><code>readOnly</code></td><td>Boolean</td><td><code>false</code></td><td>If <code>true</code>, prevents the user from editing the field value</td></tr></tbody></table><div class="warning custom-block"><p class="custom-block-title">NOTE</p><p>The uploaded files are stored in a web-accessible folder, however their file names are prepended with a randomized ID to avoid naming collisions.</p></div><h2 id="custom-file-groups" tabindex="-1">Custom file groups <a class="header-anchor" href="#custom-file-groups" aria-label="Permalink to &quot;Custom file groups&quot;">​</a></h2><p>Developers can configure file type groups in addition to <code>office</code> and <code>image</code> using the <code>fileGroups</code> or <code>addFileGroups</code> options of the <a href="./../modules/attachment.html"><code>@apostrophecms/attachment</code> module</a>. Those custom group names can then be used for an attachment field&#39;s <code>fileGroup</code> setting.</p><h2 id="use-in-templates" tabindex="-1">Use in templates <a class="header-anchor" href="#use-in-templates" aria-label="Permalink to &quot;Use in templates&quot;">​</a></h2><p>The <code>attachment</code> field value will be an object with various properties, including many metadata properties. They can be accessed directly, but it is more common to use a template helper when working with attachments in templates.</p><p>The most common helper method for attachments in templates is <code>apos.attachments.url</code>. Once an attachment field has a value, you can obtain the file&#39;s public URL with the <code>apos.attachments.url</code> template helper.</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- `data.piece.resume` is an attachment object --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{{ apos.attachment.url(data.piece.resume) }}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Download</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div>',18),l=[n];function d(i,r,c,p,h,u){return t(),a("div",null,l)}const y=e(s,[["render",d]]);export{f as __pageData,y as default};
