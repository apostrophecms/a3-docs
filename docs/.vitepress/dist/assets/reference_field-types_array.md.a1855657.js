import{_ as e,o as a,c as s,$ as t}from"./chunks/framework.9fa1e75e.js";const f=JSON.parse('{"title":"array","description":"","frontmatter":{},"headers":[],"relativePath":"reference/field-types/array.md","filePath":"reference/field-types/array.md","lastUpdated":1690289066000}'),o={name:"reference/field-types/array.md"},n=t(`<h1 id="array" tabindex="-1"><code>array</code> <a class="header-anchor" href="#array" aria-label="Permalink to &quot;\`array\`&quot;">​</a></h1><p>An <code>array</code> field has its own <a href="/reference/glossary.html#schema">field schema</a> and allows the user to add one or more entries that use the fields in that schema. The overall field is stored in the database as an array of an object for each entry.</p><p>This is useful for collections of structured data that clearly belong to a parent document but won&#39;t have relationships to other documents, such as multiple sets of contact information for business locations or tabs in a widget.</p><p>See the <a href="./relationship.html">relationship</a> field if you exclusively, or primarily, need to indentify a series of other pieces or pages.</p><h2 id="module-field-definition" tabindex="-1">Module field definition <a class="header-anchor" href="#module-field-definition" aria-label="Permalink to &quot;Module field definition&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Configuring the \`contactInfo\` array field in a module&#39;s \`fields.add\` subsection:</span></span>
<span class="line"><span style="color:#FFCB6B;">contactInfo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">label</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Contact information</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">array</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">titleField</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">city</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">fields</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">add</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">city</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">label</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">City</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">email</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">email</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">label</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Email address</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="settings" tabindex="-1">Settings <a class="header-anchor" href="#settings" aria-label="Permalink to &quot;Settings&quot;">​</a></h2><h3 id="required" tabindex="-1">Required <a class="header-anchor" href="#required" aria-label="Permalink to &quot;Required&quot;">​</a></h3><table><thead><tr><th>Property</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>label</code></td><td>String</td><td>n/a</td><td>Sets the visible label for the field in the UI</td></tr><tr><td><code>type</code></td><td>String</td><td>n/a</td><td>Specifies the field type (<code>array</code> for this type)</td></tr><tr><td><code>fields</code></td><td>Object</td><td>n/a</td><td>The field schema for the array items. See below.</td></tr></tbody></table><h3 id="optional" tabindex="-1">Optional <a class="header-anchor" href="#optional" aria-label="Permalink to &quot;Optional&quot;">​</a></h3><table><thead><tr><th>Property</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>def</code></td><td>Array</td><td>n/a</td><td>The default value for the field. It must comply with the array fields schema.</td></tr><tr><td><code>help</code></td><td>String</td><td>n/a</td><td>Help text for the content editor</td></tr><tr><td><code>htmlHelp</code></td><td>String</td><td>n/a</td><td>Help text with support for HTML markup</td></tr><tr><td><code>if</code></td><td>Object</td><td><code>{}</code></td><td>Conditions to meet before the field is active. <a href="/guide/conditional-fields.html">See the guide for details.</a></td></tr><tr><td><a href="#inline"><code>inline</code></a></td><td>Boolean</td><td>false</td><td>If <code>true</code>, array fields are edited inline with others, not in a separate dialog box.</td></tr><tr><td><code>style</code></td><td>String</td><td>n/a</td><td>Only if <code>inline</code> is true. If set to <code>table</code>, the schema will be displayed as an HTML table</td></tr><tr><td><code>min</code></td><td>Integer</td><td>n/a</td><td>The minimum number of entries required in the array</td></tr><tr><td><code>max</code></td><td>Integer</td><td>n/a</td><td>The maximum number of entries allowed in the array</td></tr><tr><td><code>required</code></td><td>Boolean</td><td><code>false</code></td><td>If <code>true</code>, the field is mandatory</td></tr><tr><td><code>readOnly</code></td><td>Boolean</td><td><code>false</code></td><td>If <code>true</code>, prevents the user from editing the field value</td></tr><tr><td><code>titleField</code></td><td>String</td><td>n/a</td><td>The name of one of the array schema fields. If provided, the user interface will use the value of that field as a label for the array tabs.</td></tr><tr><td><code>draggable</code></td><td>Boolean</td><td>true</td><td>If <code>false</code>, array items cannot be reordered using drag and drop feature.</td></tr><tr><td><a href="#whenempty"><code>whenEmpty</code></a></td><td>Object</td><td>n/a</td><td>Displays a <code>label</code> and <code>icon</code> if no array items have been added</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">NOTE</p><ul><li>If there is no <code>titleField</code> value, the items are numbered.</li><li>Setting <code>titleField</code> is recommended to improve clarity for content editors.</li><li><code>titleField</code> can access <code>relationship</code> sub-field documents by using dot notation (e.g., <code>_team[0].mascot</code>).</li></ul></div><h3 id="inline" tabindex="-1"><code>inline</code> <a class="header-anchor" href="#inline" aria-label="Permalink to &quot;\`inline\`&quot;">​</a></h3><p>Set <code>inline: true</code> on an array field to edit the array inline with the rest of the fields, rather than in a separate dialog box. This works best with a small number of fields in the array.</p><p>You can also control whether each item has a toggle to expand it, or is always displayed in fully expanded form.</p><p>By default, if <code>inline: true</code> is set and there are fewer than three fields, each item is fully expanded. You can change this by explicitly setting the inline option to <code>inline: { alwaysExpand: false }</code> or <code>inline: { alwaysExpand: true }</code>.</p><h3 id="whenempty" tabindex="-1"><code>whenEmpty</code> <a class="header-anchor" href="#whenempty" aria-label="Permalink to &quot;\`whenEmpty\`&quot;">​</a></h3><p>If no array items have been added and the array has <code>inline: true</code>, the <code>whenEmpty</code> setting supplies an object consisting of a <code>label</code> and <code>icon</code> that are displayed to the editor until items are added. The <code>label</code> property takes a localizable string, while the <code>icon</code> property takes an icon that has already been <a href="https://github.com/apostrophecms/apostrophe/blob/main/modules/@apostrophecms/asset/lib/globalIcons.js" target="_blank" rel="noreferrer">registered</a> or is registered through a module <a href="https://v3.docs.apostrophecms.org/reference/module-api/module-overview.html#icons" target="_blank" rel="noreferrer"><code>icons</code> property</a>.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">whenEmpty</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">label</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">apostrophe:whemEmpty</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">icon</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">file-document-icon</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><code>label</code> is the label to display when the inline array is empty.</li><li><code>icon</code> is <a href="/reference/module-api/module-overview.html#icons">configured in the <code>icons</code> module setting</a> in the example.</li></ul><h2 id="configuring-the-array-field-schema" tabindex="-1">Configuring the array field schema <a class="header-anchor" href="#configuring-the-array-field-schema" aria-label="Permalink to &quot;Configuring the array field schema&quot;">​</a></h2><p>Array field schemas are generally configured the same way as the module&#39;s overall field schema is configured. The module&#39;s schema is configured in its <code>fields</code> section&#39;s <code>add</code> subsection. Similarly, array field schema are configured in a <code>fields</code> property, using its <code>add</code> subproperty to configure the actual fields. Both use the field names as keys in the <code>add</code> object. Both can contain all field types, including nested <code>array</code> fields.</p><p>Array schema configuration differs from module schema configuration in that <em>array schemas</em> do not use <code>group</code> or <code>remove</code> settings.</p><h2 id="use-in-templates" tabindex="-1">Use in templates <a class="header-anchor" href="#use-in-templates" aria-label="Permalink to &quot;Use in templates&quot;">​</a></h2><p>Nunjucks provides the <a href="https://mozilla.github.io/nunjucks/templating.html#for" target="_blank" rel="noreferrer"><code>{% for %}</code> template tag</a> to loop over arrays. This is the most common way to traverse the <code>array</code> field data and sub-fields.</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">{% for contact in data.piece.contactInfo %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ contact.city }}: {{ contact.email }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endfor %}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div>`,26),l=[n];function r(d,p,c,i,y,h){return a(),s("div",null,l)}const u=e(o,[["render",r]]);export{f as __pageData,u as default};
