import{_ as e,o as a,c as s,$ as t}from"./chunks/framework.9fa1e75e.js";const n="/assets/templating-views-dirs.d26c366d.jpg",y=JSON.parse('{"title":"Working with templates","description":"","frontmatter":{"prev":{"text":"Pieces | Piece Pages","link":"guide/piece-pages.md"},"next":{"text":"Layout templates","link":"guide/layout-template.md"}},"headers":[],"relativePath":"guide/templating.md","filePath":"guide/templating.md","lastUpdated":1690289066000}'),l={name:"guide/templating.md"},o=t('<h1 id="working-with-templates" tabindex="-1">Working with templates <a class="header-anchor" href="#working-with-templates" aria-label="Permalink to &quot;Working with templates&quot;">â€‹</a></h1><p>Templates are where code and content turn into web pages people can actually see and use. Apostrophe templates use the Nunjucks templating language and generally look like normal HTML markup with special tags and variables sprinkled throughout to render data.</p><p>Template files go in <code>views</code> directories, either as module subdirectories or at the project root.</p><p><img src="'+n+`" alt="Screenshot of a file directory highlighting a default-page module views directory and the global views directory"></p><p>The root <code>views</code> directory will usually contain <a href="/guide/layout-template.html">a layout template</a> and often <a href="/guide/fragments.html">fragment templates</a>. Templates in modules&#39; <code>views</code> directories will usually be used only for their respective modules. <a href="/guide/custom-widgets.html#widget-templates">Widget</a>, <a href="/guide/pages.html#page-template-essentials">page</a>, and <a href="/guide/piece-pages.html#the-index-page-template">piece page</a> templates are the main examples of that.</p><h2 id="how-templates-work-together" tabindex="-1">How templates work together <a class="header-anchor" href="#how-templates-work-together" aria-label="Permalink to &quot;How templates work together&quot;">â€‹</a></h2><p>To paraphrase <a href="https://en.wikipedia.org/wiki/John_Donne" target="_blank" rel="noreferrer">John Donne</a>, no template is an island. Templates will always be used as a system. We do this with the <strong><code>extends</code></strong>, <strong><code>include</code></strong>, and <strong><a href="/guide/fragments.html"><code>import</code></a></strong> tags.</p><h3 id="extending-templates" tabindex="-1">Extending templates <a class="header-anchor" href="#extending-templates" aria-label="Permalink to &quot;Extending templates&quot;">â€‹</a></h3><p>When you use the <code>{% extends %}</code> tag in a template, it will inherit all of the markup and template blocks of the template it is extending. Any template blocks used in the <em>extending</em> template will replace matching blocks in the <em>extended</em> template.</p><p>For example, the layout template will often be structured like this:</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{# views/layout.html #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% extends data.outerLayout %}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{% block beforeMain %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  {# Page header markup and the main content area opening tag... #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endblock %}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{% block main %}{% endblock %}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{% block afterMain %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  {# The main content area closing tag and page footer... #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endblock %}</span></span></code></pre></div><p>Individual page type templates will extend that layout:</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{# modules/default-page/views/page.html #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% extends &quot;layout.html&quot; %}{# ðŸ‘ˆ Our template extension #}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{% block main %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  {% area data.page, &#39;mainContent&#39; %}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endblock %}</span></span></code></pre></div><p><code>page.html</code> <em>inherits</em> all of the markup and template blocks of <code>layout.html</code>. When it uses the <code>main</code> block, that <em>replaces</em> only the matching block from <code>layout.html</code>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You may have noticed that the layout template above also extends another template. <code>data.outerLayout</code> is a core, base level template. See the <a href="/guide/layout-template.html">layout template</a> guide for more on that.</p></div><h4 id="the-super-tag" tabindex="-1">The <code>super()</code> tag <a class="header-anchor" href="#the-super-tag" aria-label="Permalink to &quot;The \`super()\` tag&quot;">â€‹</a></h4><p><strong>You can also <em>add to</em> template block content, rather than completely replace it.</strong> To do this, include a <code>super()</code> render tag at the beginning of a block. <code>super()</code> will render as the contents of the inherited block.</p><p>For example, this may be in your layout file:</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{# views/layout.html #}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{% block main %}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ data.piece.title or data.page.title }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endblock main %}</span></span></code></pre></div><p>In my home page template I could extend the layout template and use <code>super()</code> to include that <code>h1</code> tag before new content markup:</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{# modules/@apostrophecms/home-page/views/page.html #}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{% block main %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  {{ super() }} {# ðŸ‘ˆ That will render the </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> tag above #}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    {# ... additional home page content #}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endblock %}</span></span></code></pre></div><p>See another example <a href="https://mozilla.github.io/nunjucks/templating.html#template-inheritance" target="_blank" rel="noreferrer">in the Nunjucks documentation</a>.</p><h3 id="including-templates" tabindex="-1">Including templates <a class="header-anchor" href="#including-templates" aria-label="Permalink to &quot;Including templates&quot;">â€‹</a></h3><p>The <code>{% include %}</code> template tag pulls one template <em>into</em> another template. This can be useful to break large template files into pieces. For example, you might write your site footer in a template file: <code>views/footer.html</code>. The layout template could include that like so:</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{# views/layout.html #}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{% block afterMain %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">main</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> {# Closing tag for the main block #}</span></span>
<span class="line"><span style="color:#A6ACCD;">  {% include &quot;footer.html&quot; %}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endblock %}</span></span></code></pre></div><p>That footer template would render as part of the layout template.</p><p>See more about including templates <a href="https://mozilla.github.io/nunjucks/templating.html#include" target="_blank" rel="noreferrer">in the Nunjucks documentation</a>.</p><h3 id="referencing-templates-across-modules" tabindex="-1">Referencing templates across modules <a class="header-anchor" href="#referencing-templates-across-modules" aria-label="Permalink to &quot;Referencing templates across modules&quot;">â€‹</a></h3><p>The <code>include</code> and <code>extends</code> tags in the examples above name &quot;global templates,&quot; which are in the root <code>views</code> directory. As such, we can simply reference by file name: e.g., <code>{% extends &quot;layout.html&quot; %}</code> or <code>{% include &quot;footer.html&quot; %}</code>. You could do the same thing if both templates were in the <em>same</em> module directory (both in our <code>modules/default-page/views</code> directory).</p><p>In some cases, <strong>we will need to extend or include a template file that belongs to a separate module</strong>. In that case, we need to provide additional information so Apostrophe can find that template.</p><p>For example, we may have a default page type that includes a sidebar we want to use in other page types:</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{# modules/default-page/views/page.html #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% extends &quot;layout.html&quot; %}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{% block main %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  {# ðŸ‘‡ Sidebar that we&#39;ll reuse. #}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">aside</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    {# Sidebar content... #}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">aside</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  {# ðŸ‘‡ Content area that we&#39;ll replace. #}</span></span>
<span class="line"><span style="color:#A6ACCD;">  {% block content %}</span></span>
<span class="line"><span style="color:#A6ACCD;">    {% area data.page, &#39;main&#39; %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  {% endblock %}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endblock %}</span></span></code></pre></div><p>Let&#39;s extend it in a contact page type to reuse that sidebar. We will only replace the <code>content</code> block. To do this, the <code>{% extend %}</code> tag must include the name of the default page module:</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{% extends &quot;default-page:page.html&quot; %}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{% block content %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Contact info</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  {# Contact information... #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endblock %}</span></span></code></pre></div><p><code>{% extends &quot;default-page:page.html&quot; %}</code> tells Apostrophe that we are using the <code>page.html</code> template file that belongs to the <code>default-page</code> module. The same pattern applies when using the <code>include</code> tag.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The Nunjucks templating language includes many tags and tools you can use in Apostrophe templates. These include:</p><ul><li>Adding conditional checks</li><li>Looping over arrays</li><li>Declaring variables</li><li>Comparison and math operators</li></ul><p>See the official <a href="https://mozilla.github.io/nunjucks/templating.html" target="_blank" rel="noreferrer">Nunjucks templating documentation</a> to see what is available.</p></div>`,36),p=[o];function c(i,r,d,h,m,u){return a(),s("div",null,p)}const C=e(l,[["render",c]]);export{y as __pageData,C as default};
