import{_ as r,K as s,o as i,c as n,O as d,k as e,a as o,$ as c}from"./chunks/framework.9fa1e75e.js";const j=JSON.parse('{"title":"@apostrophecms/util","description":"","frontmatter":{"extends":"@apostrophecms/module","sidebarDepth":2},"headers":[],"relativePath":"reference/modules/util.md","filePath":"reference/modules/util.md","lastUpdated":1690289066000}'),l={name:"reference/modules/util.md"},h=e("h1",{id:"apostrophecms-util",tabindex:"-1"},[e("code",null,"@apostrophecms/util"),o(),e("a",{class:"header-anchor",href:"#apostrophecms-util","aria-label":'Permalink to "`@apostrophecms/util`"'},"​")],-1),p=e("p",null,[e("strong",null,"Alias:"),o(),e("code",null,"apos.util")],-1),u=c('<p>The <code>@apostrophecms/util</code> module contains utility methods and tools that do not clearly belong in any other module.</p><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>logger</code></td><td>Function</td><td>A function that accepts the Apostrophe instance object (<code>self.apos</code>) and returns an object with at least <code>info</code>, <code>debug</code>, <code>warn</code>, and <code>error</code> methods for logging messages. Similarly named <code>util</code> module methods use these functions. See <a href="https://github.com/apostrophecms/apostrophe/blob/main/modules/@apostrophecms/util/lib/logger.js" target="_blank" rel="noreferrer">the default logger function</a> for an example. Overrides should be written with support for substitution strings. See the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Console/log" target="_blank" rel="noreferrer"><code>console.log</code> documentation</a>.</td></tr><tr><td><code>stackLimit</code></td><td>Integer</td><td>Defaults to 50. This is the maximum size of the asynchronous stack, tracking active widget loaders, async components, and relationship loaders.</td></tr></tbody></table><h2 id="featured-methods" tabindex="-1">Featured methods <a class="header-anchor" href="#featured-methods" aria-label="Permalink to &quot;Featured methods&quot;">​</a></h2><p>The following methods belong to this module and may be useful in project-level code. See the <a href="https://github.com/apostrophecms/apostrophe/blob/main/modules/%40apostrophecms/util/index.js" target="_blank" rel="noreferrer">source code</a> for all methods that belong to this module.</p><p>Because this module has an alias, you can call these from another module from the alias path. For example, <code>self.apos.util.log()</code>.</p><h3 id="logging-utilities" tabindex="-1">Logging utilities <a class="header-anchor" href="#logging-utilities" aria-label="Permalink to &quot;Logging utilities&quot;">​</a></h3><p>The descriptions for <code>log</code>, <code>info</code>, <code>debug</code>, <code>warn</code>, and <code>error</code> below reflect default behavior. See the <code>logger</code> option description above for information about custom behavior.</p><h4 id="log-msg" tabindex="-1"><code>log(msg)</code> <a class="header-anchor" href="#log-msg" aria-label="Permalink to &quot;`log(msg)`&quot;">​</a></h4><p>Logs a message or input, <code>msg</code>. The default implementation wraps <code>console.log</code> and passes on all arguments, so substitution strings may be used.</p><p>If a <code>logger</code> option function does not include a <code>log</code> function, the <code>info</code> method will be used. This allows an instance of <a href="https://www.npmjs.com/package/bole" target="_blank" rel="noreferrer">bole</a> or similar loggers to be passed to the <code>logger</code> option.</p><h4 id="info-msg" tabindex="-1"><code>info(msg)</code> <a class="header-anchor" href="#info-msg" aria-label="Permalink to &quot;`info(msg)`&quot;">​</a></h4><p>Logs a informational message. The default implementation wraps <code>console.info</code> and passes on all arguments, so substitution strings may be used.</p><h4 id="debug-msg" tabindex="-1"><code>debug(msg)</code> <a class="header-anchor" href="#debug-msg" aria-label="Permalink to &quot;`debug(msg)`&quot;">​</a></h4><p>Logs a debugging message. The default implementation wraps <code>console.debug</code> (or <code>console.log</code> if that&#39;s unavailable) and passes on all arguments, so substitution strings may be used.</p><h4 id="warn-msg" tabindex="-1"><code>warn(msg)</code> <a class="header-anchor" href="#warn-msg" aria-label="Permalink to &quot;`warn(msg)`&quot;">​</a></h4><p>Logs a warning message. The default implementation wraps <code>console.warn</code> and passes on all arguments, so substitution strings may be used.</p><h4 id="warndev-msg" tabindex="-1"><code>warnDev(msg)</code> <a class="header-anchor" href="#warndev-msg" aria-label="Permalink to &quot;`warnDev(msg)`&quot;">​</a></h4><p>Identical behavior to <a href="#warn-string"><code>apos.util.warn</code></a> except that the warning is not displayed if <code>p<wbr>rocess.env.NODE_ENV</code> is <code>production</code>. It will log the message every time it is called. See <code>warnDevOnce()</code> for a quieter version when messages may become repetitive.</p><h4 id="warndevonce-name-msg" tabindex="-1"><code>warnDevOnce(name, msg)</code> <a class="header-anchor" href="#warndevonce-name-msg" aria-label="Permalink to &quot;`warnDevOnce(name, msg)`&quot;">​</a></h4><p>Identical to <code>apos.util.warnDev</code>, except that the warning is only displayed once for each registered <code>name</code>. <code>name</code> should be a string not already used in an unrelated <code>warnDevOnce</code> call.</p><p>Example:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">apos</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">util</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warnDevOnce</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">github-connection-error</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">There was an error connecting to your Github account.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>The warnings will be allowed in production mode if the command line option <code>--all-[name]</code> is present when running the app (or CLI task): <code>node app --all-github-connection-error</code>.</p><p>All warnings for a particular name will be <em>muted</em> if the option <code>--ignore-[name]</code> is used: <code>node app --ignore-github-connection-error</code>.</p><h4 id="error-msg" tabindex="-1"><code>error(msg)</code> <a class="header-anchor" href="#error-msg" aria-label="Permalink to &quot;`error(msg)`&quot;">​</a></h4><p>Logs an error message. The default implementation wraps <code>console.error</code> and passes on all arguments, so substitution strings may be used.</p><h3 id="string-manipulation-methods" tabindex="-1">String manipulation methods <a class="header-anchor" href="#string-manipulation-methods" aria-label="Permalink to &quot;String manipulation methods&quot;">​</a></h3><h4 id="globalreplace-source-target-replacement" tabindex="-1"><code>globalReplace(source, target, replacement)</code> <a class="header-anchor" href="#globalreplace-source-target-replacement" aria-label="Permalink to &quot;`globalReplace(source, target, replacement)`&quot;">​</a></h4><p>Globally replaces a target string within a source string. This allows global string replacement without using regular expressions. It replaces the original <code>source</code> string and does not return a value.</p><p>Arguments are:</p><ul><li><strong><code>source</code></strong>: A string that will be replaced after updating <code>target</code> string segments.</li><li><strong><code>target</code></strong>: A string that should be replaced every time it appears in <code>source</code>.</li><li><strong><code>replacement</code></strong>: A string used to replace <code>target</code> wherever it appears in <code>source</code>.</li></ul><h4 id="truncateplaintext-string-length-prunestring" tabindex="-1"><code>truncatePlaintext(string, length, pruneString)</code> <a class="header-anchor" href="#truncateplaintext-string-length-prunestring" aria-label="Permalink to &quot;`truncatePlaintext(string, length, pruneString)`&quot;">​</a></h4><p>Truncate a <code>string</code> at the specified number of characters (<code>length</code>) without breaking words if possible. <code>pruneString</code> will be used at the end of the result as long as it does not force the end result to be longer than <code>length</code>. <code>&#39;...&#39;</code> will be used if <code>pruneString</code> is omitted.</p><p>See the <a href="https://gabceb.github.io/underscore.string.site/#prune" target="_blank" rel="noreferrer">Underscore.String.js <code>prune</code> function</a>, of which this is a copy (replacing RegExp with XRegExp for better UTF-8 support).</p><h4 id="escapehtml-string-options" tabindex="-1"><code>escapeHtml(string, options)</code> <a class="header-anchor" href="#escapehtml-string-options" aria-label="Permalink to &quot;`escapeHtml(string, options)`&quot;">​</a></h4><p>Escape a plaintext <code>string</code> correctly for use in HTML. <code>options</code> is an object of options, but may be omitted.</p><p>If <code>{ pretty: true }</code> is in the <code>options</code> object, new lines become <code>br</code> tags, and URLs become links to those URLs. Otherwise this does basic escaping. For backwards compatibility, if the second argument is truthy and not an object, <code>{ pretty: true }</code> is assumed.</p><p>If <code>{ single: true }</code> is in the <code>options</code> object, single-quotes are escaped, otherwise double-quotes are escaped.</p><h4 id="htmltoplaintext-htmlstring" tabindex="-1"><code>htmlToPlaintext(htmlString)</code> <a class="header-anchor" href="#htmltoplaintext-htmlstring" aria-label="Permalink to &quot;`htmlToPlaintext(htmlString)`&quot;">​</a></h4><p>A method to convert a string of HTML to simple plain text (no rich text indicators). This is meant for basic HTML conversion, such as converting the contents of a piece&#39;s rich text widget teaser into unformatted text to be displayed on the index page. It returns a string of plain text.</p><h4 id="capitalizefirst-string" tabindex="-1"><code>capitalizeFirst(string)</code> <a class="header-anchor" href="#capitalizefirst-string" aria-label="Permalink to &quot;`capitalizeFirst(string)`&quot;">​</a></h4><p><code>capitalizeFirst</code> accepts a string argument and returns the string with the first letter capitalized.</p><h4 id="cssname-camelstring" tabindex="-1"><code>cssName(camelString)</code> <a class="header-anchor" href="#cssname-camelstring" aria-label="Permalink to &quot;`cssName(camelString)`&quot;">​</a></h4><p>This method is used to convert &quot;camel case&quot; strings (<code>spiderMan</code>) into CSS-friendly &quot;kebab case&quot; (<code>spider-man</code>). It returns the converted string.</p><h4 id="camelname-string" tabindex="-1"><code>camelName(string)</code> <a class="header-anchor" href="#camelname-string" aria-label="Permalink to &quot;`camelName(string)`&quot;">​</a></h4><p>This method converts a string to camel case and returns the converted string. Any characters that are not alphanumeric will be removed and the following character (if alphanumeric) will be capitalized.</p><h4 id="addslashifneeded-path" tabindex="-1"><code>addSlashIfNeeded(path)</code> <a class="header-anchor" href="#addslashifneeded-path" aria-label="Permalink to &quot;`addSlashIfNeeded(path)`&quot;">​</a></h4><p><code>addSlashIfNeeded()</code> accepts a string and returns it with a slash at the end only if there is not one already. It is useful for ensuring uniform URL paths in code.</p><h4 id="slugify-string-options" tabindex="-1"><code>slugify(string, options)</code> <a class="header-anchor" href="#slugify-string-options" aria-label="Permalink to &quot;`slugify(string, options)`&quot;">​</a></h4><p>This is a wrapper for the <a href="https://www.npmjs.com/package/sluggo" target="_blank" rel="noreferrer">sluggo</a> utility. It accepts a string and options object. It returns the string lower cased and with spaces and non-alphanumeric characters replaced with a dash (by default). See the sluggo documentation for other options.</p><h4 id="sortify-string" tabindex="-1"><code>sortify(string)</code> <a class="header-anchor" href="#sortify-string" aria-label="Permalink to &quot;`sortify(string)`&quot;">​</a></h4><p><code>sortify</code> does the same thing as <code>slugify</code>, but whitespace and non-alphanumeric characters are replaced with a single space instead of a dash. This is used to make strings uniform for sorting, including for populating document properties such as <code>titleSortified</code> that store the uniform version.</p><h3 id="other-utility-methods" tabindex="-1">Other utility methods <a class="header-anchor" href="#other-utility-methods" aria-label="Permalink to &quot;Other utility methods&quot;">​</a></h3><h4 id="generateid" tabindex="-1"><code>generateId()</code> <a class="header-anchor" href="#generateid" aria-label="Permalink to &quot;`generateId()`&quot;">​</a></h4><p>Returns a unique identifier (ID) for a new page or other object. IDs are generated with the <code>cuid</code> module which prevents collisions and ensures a certain level of complexity. This should not be used for passwords, however.</p><h4 id="md5-string" tabindex="-1"><code>md5(string)</code> <a class="header-anchor" href="#md5-string" aria-label="Permalink to &quot;`md5(string)`&quot;">​</a></h4><p>Perform an md5 checksum on a string. Returns a hex string.</p><h4 id="async-md5file-filepath" tabindex="-1"><code>async md5File(filepath)</code> <a class="header-anchor" href="#async-md5file-filepath" aria-label="Permalink to &quot;`async md5File(filepath)`&quot;">​</a></h4><p>Perform an md5 checksum on a file at a given path. Async. Returns a Promise that resolves to a hex string.</p><h4 id="async-filelength-filepath" tabindex="-1"><code>async fileLength(filepath)</code> <a class="header-anchor" href="#async-filelength-filepath" aria-label="Permalink to &quot;`async fileLength(filepath)`&quot;">​</a></h4><p>Accepts a file path and returns a Promise that resolves to the file size in bytes.</p><h4 id="clonepermanent-object-keepscalars" tabindex="-1"><code>clonePermanent(object, keepScalars)</code> <a class="header-anchor" href="#clonepermanent-object-keepscalars" aria-label="Permalink to &quot;`clonePermanent(object, keepScalars)`&quot;">​</a></h4><p>Clone the given object recursively, discarding all properties whose names begin with underscores (<code>_</code>) except for <code>_id</code>. Returns the cloned object.</p><p>This removes the output of relationships and other dynamic loaders, so that dynamically available content is not stored redundantly in MongoDB. Object values that are <code>Date</code> objects are cloned as such. All other non-JSON objects are cloned as plain JSON objects.</p><p>If <code>keepScalars</code> is true, properties beginning with underscores are kept as long as they are not objects. This is useful when using <code>clonePermanent</code> to limit JSON inserted into browser attributes, rather than filtering for the database. Preserving simple string properties like <code>_url</code> is usually a good thing in the former case.</p><p>If the <code>object</code> argument is an array, the clone is also an array. Arrays are cloned as such only if they are true arrays (<code>Array.isArray()</code> returns <code>true</code>).</p><h4 id="orderbyid-ids-items-idproperty" tabindex="-1"><code>orderById(ids, items, idProperty)</code> <a class="header-anchor" href="#orderbyid-ids-items-idproperty" aria-label="Permalink to &quot;`orderById(ids, items, idProperty)`&quot;">​</a></h4><p><code>ids</code> should be an array of identifiers (<code>_id</code> properties, by default). The elements of the <code>items</code> array, which should be the result of a mongodb query, are returned in the order specified by the <code>ids</code> array.</p><p>This is useful after performing an <code>$in</code> query with MongoDB (<code>$in</code> does <em>not</em> sort its results in the order given). Any IDs that do not actually exist for an item in the <code>items</code> array are not returned, and vice versa. You should not assume the result will have the same length as either array.</p><p>Optionally you may specify a property name other than <code>_id</code> as the third argument (<code>idProperty</code>). You may use dot notation in this argument.</p><h4 id="isajaxrequest-req" tabindex="-1"><code>isAjaxRequest(req)</code> <a class="header-anchor" href="#isajaxrequest-req" aria-label="Permalink to &quot;`isAjaxRequest(req)`&quot;">​</a></h4><p>Returns <code>true</code> if the <code>req</code> request object is an AJAX request (<code>req.xhr</code> is set, or <code>req.query.xhr</code> is set to emulate it) <em>and</em> Apostrophe&#39;s main content area refresh mechanism is not in play (<code>req.query.aposRefresh</code> is not <code>&#39;1&#39;</code>).</p><h4 id="insensitivesort-strings" tabindex="-1"><code>insensitiveSort(strings)</code> <a class="header-anchor" href="#insensitivesort-strings" aria-label="Permalink to &quot;`insensitiveSort(strings)`&quot;">​</a></h4><p>Sort an array of strings (<code>strings</code>) in place, comparing strings in a case-insensitive way. It does not return a value.</p><h4 id="insensitivesortbyproperty-objects-property" tabindex="-1"><code>insensitiveSortByProperty(objects, property)</code> <a class="header-anchor" href="#insensitivesortbyproperty-objects-property" aria-label="Permalink to &quot;`insensitiveSortByProperty(objects, property)`&quot;">​</a></h4><p>Sort an array of objects (<code>objects</code>) in place, based on the value of the given <code>property</code> of each object, in a case-insensitive way. It does not return a value.</p><h4 id="findnestedobjectbyid-object-id-options" tabindex="-1"><code>findNestedObjectById(object, _id, options)</code> <a class="header-anchor" href="#findnestedobjectbyid-object-id-options" aria-label="Permalink to &quot;`findNestedObjectById(object, _id, options)`&quot;">​</a></h4><p>Within an <code>object</code> (typically a full content document or widget object), find and return a nested object with the given <code>_id</code> property. This works regardless of the target object&#39;s nesting depth. Useful to locate a specific widget within a document.</p><p>Pass <code>{ ignoreDynamicProperties: true }</code> as the <code>options</code> argument to skip objects set on dynamic properties (those starting with <code>_</code>) during this check. This is useful to ignore documents loaded via relationships.</p><h4 id="findnestedobjectanddotpathbyid-object-id-options" tabindex="-1"><code>findNestedObjectAndDotPathById(object, _id, options)</code> <a class="header-anchor" href="#findnestedobjectanddotpathbyid-object-id-options" aria-label="Permalink to &quot;`findNestedObjectAndDotPathById(object, _id, options)`&quot;">​</a></h4><p>Similar to <code>findNestedObjectById</code>. Within an <code>object</code> (typically a full content document or widget object), find a nested object with the given <code>_id</code> property. This works regardless of the target object&#39;s nesting depth. Useful to locate a specific widget within a document.</p><p>Unlike <code>findNestedObjectById</code>, <strong>this returns an object with two properties:</strong></p><ul><li><code>object</code>: The target object as returned by the other method.</li><li><code>dotPath</code>: The dot notation path to the target object.</li></ul><p>Pass <code>{ ignoreDynamicProperties: true }</code> as the <code>options</code> argument to skip objects set on dynamic properties (those starting with <code>_</code>) during this check.</p><h4 id="getmanagerof-object" tabindex="-1"><code>getManagerOf(object)</code> <a class="header-anchor" href="#getmanagerof-object" aria-label="Permalink to &quot;`getManagerOf(object)`&quot;">​</a></h4><p>Given a widget or document object, this returns the appropriate manager module.</p><h4 id="get-obj-path" tabindex="-1"><code>get(obj, path)</code> <a class="header-anchor" href="#get-obj-path" aria-label="Permalink to &quot;`get(obj, path)`&quot;">​</a></h4><p>Returns the value at the given <code>path</code> from the object or array <code>obj</code>.</p><p><code>path</code> supports dot notation like MongoDB. If the first dot notation segment of <code>path</code> begins with <code>@xyz</code> (or <code>@</code> followed by any alphanumeric value) the nested object within <code>obj</code> with an <code>_id</code> property equal to <code>xyz</code> is found and returned, no matter how deeply nested it is.</p><h4 id="set-obj-path-val" tabindex="-1"><code>set(obj, path, val)</code> <a class="header-anchor" href="#set-obj-path-val" aria-label="Permalink to &quot;`set(obj, path, val)`&quot;">​</a></h4><p>Set a value (<code>val</code>) at the provided <code>path</code> within the object or array <code>obj</code>, mutating <code>obj</code>.</p><p><code>path</code> supports dot notation like MongoDB. If the first dot notation segment of <code>path</code> begins with <code>@xyz</code> (or <code>@</code> followed by any alphanumeric value) the nested object within <code>obj</code> with an <code>_id</code> property equal to <code>xyz</code> is located, no matter how deeply nested it is. If <code>@xyz</code> is the full <code>path</code> argument, the nested object is replaced with <code>val</code>. If there are further components via dot notation, they are used to locate the final location for <code>val</code>.</p><p>The <code>@</code> syntax works only for locating nested objects. You may not pass <code>@abc</code> where <code>abc</code> is the <code>_id</code> of <code>obj</code> itself.</p><h4 id="clonereq-req-properties" tabindex="-1"><code>cloneReq(req, properties)</code> <a class="header-anchor" href="#clonereq-req-properties" aria-label="Permalink to &quot;`cloneReq(req, properties)`&quot;">​</a></h4><p>Returns a <em>new</em> <code>req</code> object with the properties of the original plus any in the optional <code>properties</code> parameter. Used when a request object with one change is desired, such as <code>mode: &#39;published&#39;</code>. Avoids the need to push and pop properties of the original <code>req</code>. Also available as <code>req.clone(properties)</code>.</p><h4 id="runplayers-el" tabindex="-1"><code>runPlayers(el)</code> <a class="header-anchor" href="#runplayers-el" aria-label="Permalink to &quot;`runPlayers(el)`&quot;">​</a></h4><p>Runs all the widget players that have not been run in the whole document. Passing an optional DOM element to the <code>el</code> parameter will restrict the search for unplayed players to that element only. This function is useful when dynamic content has been added after <code>apos.util.onReady</code> has fired.</p><h2 id="template-helpers" tabindex="-1">Template helpers <a class="header-anchor" href="#template-helpers" aria-label="Permalink to &quot;Template helpers&quot;">​</a></h2><p>Template helpers are methods available for use in template files. Because this module has an alias, you can call these in templates using the alias path. For example, <code>apos.util.log()</code>.</p><p>Some of these utility helpers replicate JavaScript APIs that are not available in Nunjucks templates natively.</p><h4 id="slugify-string-options-1" tabindex="-1"><code>slugify(string, options)</code> <a class="header-anchor" href="#slugify-string-options-1" aria-label="Permalink to &quot;`slugify(string, options)`&quot;">​</a></h4><p>A wrapper of the <a href="#slugify-string-options"><code>slugify()</code> method</a> described above.</p><h3 id="log-msg-1" tabindex="-1"><code>log(msg)</code> <a class="header-anchor" href="#log-msg-1" aria-label="Permalink to &quot;`log(msg)`&quot;">​</a></h3><p>A wrapper of the <a href="#log-msg"><code>log()</code> method</a> described above.</p><h3 id="generateid-1" tabindex="-1"><code>generateId()</code> <a class="header-anchor" href="#generateid-1" aria-label="Permalink to &quot;`generateId()`&quot;">​</a></h3><p>A wrapper of the <a href="#generateid"><code>generateId()</code> method</a> described above.</p><h3 id="iscurrentyear-d" tabindex="-1"><code>isCurrentYear(d)</code> <a class="header-anchor" href="#iscurrentyear-d" aria-label="Permalink to &quot;`isCurrentYear(d)`&quot;">​</a></h3><p>Returns <code>true</code> if the <code>Date</code> object (<code>d</code>) refers to a date in the current year.</p><h3 id="isundefined-val" tabindex="-1"><code>isUndefined(val)</code> <a class="header-anchor" href="#isundefined-val" aria-label="Permalink to &quot;`isUndefined(val)`&quot;">​</a></h3><p>Returns <code>true</code> if the value <code>val</code> is strictly equal to <code>undefined</code>.</p><h3 id="isfalse-val" tabindex="-1"><code>isFalse(val)</code> <a class="header-anchor" href="#isfalse-val" aria-label="Permalink to &quot;`isFalse(val)`&quot;">​</a></h3><p>Returns <code>true</code> if the value <code>val</code> is strictly equal to <code>false</code>.</p><h3 id="isfunction-val" tabindex="-1"><code>isFunction(val)</code> <a class="header-anchor" href="#isfunction-val" aria-label="Permalink to &quot;`isFunction(val)`&quot;">​</a></h3><p>Returns <code>true</code> if the value <code>val</code> is a function (<code>typeof val === &#39;function&#39;</code>).</p><h3 id="startcase-str" tabindex="-1"><code>startCase(str)</code> <a class="header-anchor" href="#startcase-str" aria-label="Permalink to &quot;`startCase(str)`&quot;">​</a></h3><p>Returns a string <code>str</code> to start case (first letter of each word is capitalized).Used to make default labels out of camel case property names.</p><h3 id="eqstrict-a-b" tabindex="-1"><code>eqStrict(a, b)</code> <a class="header-anchor" href="#eqstrict-a-b" aria-label="Permalink to &quot;`eqStrict(a, b)`&quot;">​</a></h3><p>Returns <code>true</code> if values <code>a</code> and <code>b</code> are strictly equal. The Nunjucks template syntax does not recognize <code>===</code> to test this.</p><h3 id="contains-list-val" tabindex="-1"><code>contains(list, val)</code> <a class="header-anchor" href="#contains-list-val" aria-label="Permalink to &quot;`contains(list, val)`&quot;">​</a></h3><p>Returns <code>true</code> if the list <code>list</code> contains the specified value, <code>val</code>. <code>list</code> may be an array, object, or string (to look for a substring). This uses the <a href="https://lodash.com/docs/4.17.15#includes" target="_blank" rel="noreferrer">lodash <code>includes</code> method</a>.</p><p>If <code>val</code> is an array, this returns <code>true</code> if the list contains <em>any of</em> the specified values.</p><h3 id="containsproperty-list-prop" tabindex="-1"><code>containsProperty(list, prop)</code> <a class="header-anchor" href="#containsproperty-list-prop" aria-label="Permalink to &quot;`containsProperty(list, prop)`&quot;">​</a></h3><p>Returns <code>true</code> if the list contains <em>at least</em> one object with the named property, <code>prop</code>. <code>list</code> may be an array, object, or string (to look for a substring). This uses the <a href="https://lodash.com/docs/4.17.15#has" target="_blank" rel="noreferrer">lodash <code>has</code> method</a>.</p><p>If <code>list</code> is a single object, this function returns <code>true</code> if that object has a property <code>prop</code>.</p><h2 id="object-and-array-helpers" tabindex="-1">Object and array helpers <a class="header-anchor" href="#object-and-array-helpers" aria-label="Permalink to &quot;Object and array helpers&quot;">​</a></h2><h3 id="inspect-obj" tabindex="-1"><code>inspect(obj)</code> <a class="header-anchor" href="#inspect-obj" aria-label="Permalink to &quot;`inspect(obj)`&quot;">​</a></h3><p>Logs the properties of an object, <code>obj</code>, in detail. Invokes the Node.js <a href="https://nodejs.org/docs/latest-v8.x/api/util.html#util_util_inspect_object_options" target="_blank" rel="noreferrer"><code>util.inspect()</code></a> method on the object, to a depth of 10.</p><h3 id="reverse-arr" tabindex="-1"><code>reverse(arr)</code> <a class="header-anchor" href="#reverse-arr" aria-label="Permalink to &quot;`reverse(arr)`&quot;">​</a></h3><p>Returns the array, <code>arr</code>, in reverse order.</p><h3 id="beginswith-list-val" tabindex="-1"><code>beginsWith(list, val)</code> <a class="header-anchor" href="#beginswith-list-val" aria-label="Permalink to &quot;`beginsWith(list, val)`&quot;">​</a></h3><p>If the <code>list</code> argument is a string, returns <code>true</code> if it starts with the value <code>val</code>. If the <code>list</code> argument is an array, returns true if <em>at least one</em> of its items begins with <code>val</code>.</p><h3 id="find-arr-prop-val" tabindex="-1"><code>find(arr, prop, val)</code> <a class="header-anchor" href="#find-arr-prop-val" aria-label="Permalink to &quot;`find(arr, prop, val)`&quot;">​</a></h3><p>Finds and returns the <em>first</em> array (<code>arr</code>) item, if any, that has the specified value (<code>val</code>) for the specified property (<code>prop</code>).</p><h3 id="filter-arr-prop-val" tabindex="-1"><code>filter(arr, prop, val)</code> <a class="header-anchor" href="#filter-arr-prop-val" aria-label="Permalink to &quot;`filter(arr, prop, val)`&quot;">​</a></h3><p>Finds and returns <em>all</em> array (<code>arr</code>) items, if any, that have the specified value (<code>val</code>) for the specified property (<code>prop</code>).</p><h3 id="reject-arr-prop-val" tabindex="-1"><code>reject(arr, prop, val)</code> <a class="header-anchor" href="#reject-arr-prop-val" aria-label="Permalink to &quot;`reject(arr, prop, val)`&quot;">​</a></h3><p>Returns the array (<code>arr</code>), <em>filtering out</em> any items, if any, that have the specified value (<code>val</code>) for the specified property (<code>prop</code>).</p><h3 id="filternonempty-arr-prop" tabindex="-1"><code>filterNonempty(arr, prop)</code> <a class="header-anchor" href="#filternonempty-arr-prop" aria-label="Permalink to &quot;`filterNonempty(arr, prop)`&quot;">​</a></h3><p>Finds and returns <em>all</em> array (<code>arr</code>) items, if any, that have <em>truthy values</em> for the specified property (<code>prop</code>).</p><h3 id="filterempty" tabindex="-1"><code>filterEmpty()</code> <a class="header-anchor" href="#filterempty" aria-label="Permalink to &quot;`filterEmpty()`&quot;">​</a></h3><p>Finds and returns <em>all</em> array (<code>arr</code>) items, if any, that have <em>falsy values</em> for the specified property (<code>prop</code>).</p><h3 id="isempty-obj" tabindex="-1"><code>isEmpty(obj)</code> <a class="header-anchor" href="#isempty-obj" aria-label="Permalink to &quot;`isEmpty(obj)`&quot;">​</a></h3><p>Returns <code>true</code> if the specified array or object (<code>obj</code>) is considered empty Objects are empty if they have no own enumerable properties. Arrays are considered empty if they have a length of 0.</p><h3 id="pluck-arr-prop" tabindex="-1"><code>pluck(arr, prop)</code> <a class="header-anchor" href="#pluck-arr-prop" aria-label="Permalink to &quot;`pluck(arr, prop)`&quot;">​</a></h3><p>Given an <em>array of objects</em> (<code>arr</code>) with the given property (<code>prop</code>), return an array with the value of that property for each object.</p><h3 id="omit-obj-paths" tabindex="-1"><code>omit(obj, paths)</code> <a class="header-anchor" href="#omit-obj-paths" aria-label="Permalink to &quot;`omit(obj, paths)`&quot;">​</a></h3><p>Given an object (<code>obj</code>), returns an object without the named path or property paths (<code>paths</code>). <code>paths</code> may be a string or array of strings.</p><h3 id="difference-arr1-arr2-prop" tabindex="-1"><code>difference(arr1, arr2, prop)</code> <a class="header-anchor" href="#difference-arr1-arr2-prop" aria-label="Permalink to &quot;`difference(arr1, arr2, prop)`&quot;">​</a></h3><p>Given the arrays <code>arr1</code> and <code>arr2</code>, this returns a subset of elements in <code>arr1</code> that <em>do not</em> appear in <code>arr2</code>. If <code>arr2</code> is not an array it is treated as an empty array.</p><p>If <code>prop</code> is present, then that property of each object in <code>arr1</code> is compared to <code>arr2</code> items. This is useful when <code>arr1</code> contains field choice objects (e.g., in <a href="/reference/field-types/select.html#choices-configuration">select fields</a>) with a <code>value</code> property, while <code>arr2 </code>just contains actual values.</p><p>A deep comparison is performed with the <a href="https://lodash.com/docs/4.17.15#isEqual" target="_blank" rel="noreferrer">lodash <code>isEqual</code> method</a>.</p><h3 id="concat-arr1-arr2-arr3-arr4" tabindex="-1"><code>concat(arr1, arr2, /* arr3, arr4... */)</code> <a class="header-anchor" href="#concat-arr1-arr2-arr3-arr4" aria-label="Permalink to &quot;`concat(arr1, arr2, /* arr3, arr4... */)`&quot;">​</a></h3><p>Concatenate all of the array and/or value arguments into a single array. If an argument is an array, all of its elements are individually added to the resulting array. If an argument is a non-array value, it is added directly to the array.</p><h3 id="groupby-items-key" tabindex="-1"><code>groupBy(items, key)</code> <a class="header-anchor" href="#groupby-items-key" aria-label="Permalink to &quot;`groupBy(items, key)`&quot;">​</a></h3><p>Returns an object that groups items in a collection (<code>items</code>) by the property named by <code>key</code> on each of the values.</p><p>If the first item in <code>items</code> has an array on the property named by <code>key</code>, this returns an object that groups each item by their shared array values.</p><h3 id="object-key1-value1-key2-value2" tabindex="-1"><code>object(/* key1, value1, key2, value2... */)</code> <a class="header-anchor" href="#object-key1-value1-key2-value2" aria-label="Permalink to &quot;`object(/* key1, value1, key2, value2... */)`&quot;">​</a></h3><p>Given a series of alternating keys and values, this function returns an object with the keys set to the following values. For instance, <code>apos.util.object(&#39;name&#39;, &#39;bob&#39;)</code> returns <code>{ name: &#39;bob&#39; }</code>. This is useful since Nunjucks does not allow you to create an object with a property whose name is unknown at the time the template is written.</p><h3 id="merge-obj1-obj2-obj3" tabindex="-1"><code>merge(/* obj1, obj2, obj3... */)</code> <a class="header-anchor" href="#merge-obj1-obj2-obj3" aria-label="Permalink to &quot;`merge(/* obj1, obj2, obj3... */)`&quot;">​</a></h3><p>This helper accepts any number of object arguments. It then merges them into a new object and the returns resulting object. If several objects have a property, the last object passed in wins.</p><p>If any argument is <code>null</code>, it is skipped gracefully. This allows you to pass in an unexamined variable without checking if it is <code>null</code>.</p>',162);function m(t,b,g,f,y,v){const a=s("AposRefExtends");return i(),n("div",null,[h,p,d(a,{module:t.$frontmatter.extends},null,8,["module"]),u])}const w=r(l,[["render",m]]);export{j as __pageData,w as default};
