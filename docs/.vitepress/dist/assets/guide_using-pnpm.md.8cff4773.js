import{_ as e,o,c as t,$ as n}from"./chunks/framework.9fa1e75e.js";const f=JSON.parse('{"title":"Using pnpm","description":"","frontmatter":{"prev":{"text":"Webpack","link":"guide/webpack.md"},"next":{"text":"ðŸ“¦ Core Modules | @apostrophecms/admin-bar","link":"reference/modules/admin-bar.md"}},"headers":[],"relativePath":"guide/using-pnpm.md","filePath":"guide/using-pnpm.md","lastUpdated":1690289066000}'),a={name:"guide/using-pnpm.md"},p=n('<h1 id="using-pnpm" tabindex="-1">Using pnpm <a class="header-anchor" href="#using-pnpm" aria-label="Permalink to &quot;Using pnpm&quot;">â€‹</a></h1><p><code>pnpm</code> and <code>npm</code> are both package managers for JavaScript projects, but they have different approaches to managing dependencies. Node comes pre-packaged with <code>npm</code>, but <code>pnpm</code> presents a number of advantages such as better security, and monorepo support.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The Apostrophe core is compatible with v7 and v8 of <code>pnpm</code>. However, if your project has custom extensions or testing that is not pnpm-compatible, for example, an extension that takes advantage of <code>npm</code> hoisting of core dependencies for functionality, your project will not build correctly. You should test this carefully before converting your project.</p></div><p>When creating a project from scratch, Apostrophe will attempt to automatically detect the use of <code>pnpm</code> by examining your project root directory for a <code>pnpm-lock.yaml</code> file. Some monorepo tools will interfere with automatic detection. You can force the use of <code>pnpm</code> by setting an option of <code>pnpm: &#39;true&#39;</code> in your <code>app.js</code> file.</p><p>When using the Apostrophe CLI tool to create a new project <code>npm</code> will be used by default to install your dependencies. This means that if you create a project using the CLI you will need to convert it to utilize <code>pnpm</code>.</p><p>This is as simple as deleting the <code>node_modules</code> folder and the <code>package-lock.json</code> files. Additionally, you want to change the <code>release</code> script of your <code>package.json</code> file to use <code>pnpm</code> instead of <code>npm</code>.</p><p>Finally, to install your packages run <code>pnpm install</code>. Using version 8 this will install any non-optional peer dependencies by default. For version 7 of <code>pnpm</code>, you need to either turn this on by passing the configuration in using <code>pnpm install --config.auto-install-peers=true</code>, or by setting it using <code>pnpm set auto-install-peers=true --global</code>. Using global will force this configuration on all projects built locally and you can leave this off. You can see other options in the <a href="https://pnpm.io/" target="_blank" rel="noreferrer">pnpm documentation</a>.</p><p>Lastly, to spin your project up locally for development use <code>pnpm run dev</code> as you would with <code>npm</code>.</p>',8),c=[p];function i(s,r,d,l,u,m){return o(),t("div",null,c)}const g=e(a,[["render",i]]);export{f as __pageData,g as default};
