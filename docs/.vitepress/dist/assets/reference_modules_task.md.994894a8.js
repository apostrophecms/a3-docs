import{_ as s,K as n,o as r,c as i,O as c,k as e,a as o,$ as d}from"./chunks/framework.9fa1e75e.js";const v=JSON.parse('{"title":"@apostrophecms/task","description":"","frontmatter":{"extends":"@apostrophecms/module"},"headers":[],"relativePath":"reference/modules/task.md","filePath":"reference/modules/task.md","lastUpdated":1690289066000}'),l={name:"reference/modules/task.md"},p=e("h1",{id:"apostrophecms-task",tabindex:"-1"},[e("code",null,"@apostrophecms/task"),o(),e("a",{class:"header-anchor",href:"#apostrophecms-task","aria-label":'Permalink to "`@apostrophecms/task`"'},"​")],-1),h=e("p",null,[e("strong",null,"Alias:"),o(),e("code",null,"apos.task")],-1),u=d('<p>This module allows support modules in creating command line tasks. It also provides utilities for generating request objects when one is not available and is needed.</p><p>Command line tasks are invoked with the general structure:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">module-name:task-name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--arguments</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># Example</span></span>\n<span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@apostrophecms/migration:migrate</span></span>\n<span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">article:generate</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--total=20</span></span></code></pre></div><p>Apostrophe is fully initialized before a task is run, except that it does not listen for connections. We may access all general Apostrophe features in a task.</p><h2 id="related-documentation" tabindex="-1">Related documentation <a class="header-anchor" href="#related-documentation" aria-label="Permalink to &quot;Related documentation&quot;">​</a></h2><ul><li><a href="/reference/module-api/module-overview.html#tasks-self">Module task configuration</a></li></ul><h2 id="featured-methods" tabindex="-1">Featured methods <a class="header-anchor" href="#featured-methods" aria-label="Permalink to &quot;Featured methods&quot;">​</a></h2><p>The following methods belong to this module and may be useful in project-level code. See the <a href="https://github.com/apostrophecms/apostrophe/blob/main/modules/%40apostrophecms/task/index.js" target="_blank" rel="noreferrer">source code</a> for all methods that belong to this module.</p><p>Because this module has an alias, you can call these from another module from the alias path. For example, <code>self.apos.task.invoke(...)</code>.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p><code>getReq</code> and the related methods below should be used very carefully. It is easy to accidentally grant admin-level (or other higher role) access when lower level permissions are better applied. Those methods are primarily meant for writing unit tests and CLI tasks.</p><p>It is almost always the case that an existing request object should be used instead when available (e.g., in an API route handler or event handler such as <code>beforeInsert</code>).</p></div><h3 id="invoke-name-args-options" tabindex="-1"><code>invoke(name, args, options)</code> <a class="header-anchor" href="#invoke-name-args-options" aria-label="Permalink to &quot;`invoke(name, args, options)`&quot;">​</a></h3><p>For use when you wish to execute an Apostrophe command line task from server-side code and continue with other work. This avoids using the command line directly or using the Node.js <code>child_process</code> module. The method returns a Promise (it can be run with the <code>async/await</code> syntax).</p><p><strong>The <code>name</code> argument</strong> is the only one that is required. It must be the name of a task, including the name of the module where it was registered, e.g., <code>&#39;@apostrophecms/user:add&#39;</code>.</p><p>If present, <strong>the <code>args</code> argument should be an array of positional arguments</strong> that would be provided to the task in a CLI, <em>not including</em> the task name.</p><p>If present, <strong>the <code>options</code> argument is an object that contains optional parameters</strong> that would normally be hyphenated, i.e. at the command line you might write <code>--total=20</code>. This can be passed as the second argument if <code>args</code> is omitted.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"># CLI equivalent: node app @apostrophecms/user:add &#39;alf&#39; &#39;admin&#39;</span></span>\n<span class="line"><span style="color:#A6ACCD;">await self.apos.task.invoke(&#39;@apostrophecms/user:add&#39;, [ &#39;alf&#39;, &#39;admin&#39; ])</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;"># CLI equivalent: node app product:generate --total=20</span></span>\n<span class="line"><span style="color:#A6ACCD;">await self.apos.task.invoke(&#39;product:generate&#39;, { total: 20 })</span></span></code></pre></div><p>The <code>args</code> and <code>options</code> arguments may be completely omitted, though individual tasks should indicate whether arguments are required when they are run.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>It is better to call a module&#39;s method <em>directly</em> rather than invoking a task when possible. This method is for cases where that option is not readily available.</p><p>During the execution of the task, <code>self.apos.argv</code> will have a new, temporary value to accommodate tasks that inspect this property directly rather than examining their <code>argv</code> argument. <code>self.apos.argv</code> will be restored at the end of task execution.</p><p>Test carefully as some tasks may not be written to be &quot;good neighbors.&quot; For instance, a task developer might assume they can exit the process directly.</p></div><h3 id="getreq-options" tabindex="-1"><code>getReq(options)</code> <a class="header-anchor" href="#getreq-options" aria-label="Permalink to &quot;`getReq(options)`&quot;">​</a></h3><p>Return a <code>req</code> object suitable for command line tasks and unit tests. The <code>req</code> object returned is a mockup of a true Express <code>req</code> object.</p><p>The <code>options</code> argument should be an object. If <code>options.role</code> is set, it may be:</p><ul><li><code>anon</code> (no user role and no <code>req.user</code>)</li><li><code>guest</code></li><li><code>contributor</code></li><li><code>editor</code></li><li><code>admin</code> (the default)</li></ul><p>The methods below provide quick access to create request objects for each role. See <a href="/guide/users.html#user-roles">the users guide</a> for information about each role.</p><p>Other properties of <code>options</code> are assigned as properties of the returned <code>req</code> object before any initialization tasks (such as computing <code>req.absoluteUrl</code>).</p><h3 id="getanonreq-options" tabindex="-1"><code>getAnonReq(options)</code> <a class="header-anchor" href="#getanonreq-options" aria-label="Permalink to &quot;`getAnonReq(options)`&quot;">​</a></h3><p>A convenience wrapper for <code>getReq</code>. This returns a request object simulating an anonymous site visitor, with no role and no <code>req.user</code>. See <a href="#getreq-options"><code>getReq</code></a> for information about the <code>options</code> argument.</p><h3 id="getguestreq-options" tabindex="-1"><code>getGuestReq(options)</code> <a class="header-anchor" href="#getguestreq-options" aria-label="Permalink to &quot;`getGuestReq(options)`&quot;">​</a></h3><p>A convenience wrapper for <code>getReq</code>. This returns a request object simulating a user with the <code>guest</code> role. See <a href="#getreq-options"><code>getReq</code></a> for information about the <code>options</code> argument.</p><h3 id="getcontributorreq-options" tabindex="-1"><code>getContributorReq(options)</code> <a class="header-anchor" href="#getcontributorreq-options" aria-label="Permalink to &quot;`getContributorReq(options)`&quot;">​</a></h3><p>A convenience wrapper for <code>getReq</code>. This returns a request object simulating a user with the <code>contributor</code> role. See <a href="#getreq-options"><code>getReq</code></a> for information about the <code>options</code> argument.</p><h3 id="geteditorreq-options" tabindex="-1"><code>getEditorReq(options)</code> <a class="header-anchor" href="#geteditorreq-options" aria-label="Permalink to &quot;`getEditorReq(options)`&quot;">​</a></h3><p>A convenience wrapper for <code>getReq</code>. This returns a request object simulating a user with the <code>editor</code> role. See <a href="#getreq-options"><code>getReq</code></a> for information about the <code>options</code> argument.</p><h3 id="getadminreq-options" tabindex="-1"><code>getAdminReq(options)</code> <a class="header-anchor" href="#getadminreq-options" aria-label="Permalink to &quot;`getAdminReq(options)`&quot;">​</a></h3><p>A convenience wrapper for <code>getReq</code>. This returns a request object simulating a user with the <code>admin</code> role. This is the default behavior of <code>getReq()</code>. See <a href="#getreq-options"><code>getReq</code></a> for information about the <code>options</code> argument.</p>',34);function m(t,g,f,b,q,k){const a=n("AposRefExtends");return r(),i("div",null,[p,h,c(a,{module:t.$frontmatter.extends},null,8,["module"]),u])}const C=s(l,[["render",m]]);export{v as __pageData,C as default};
