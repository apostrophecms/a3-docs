import{_ as n,o as l,c as p,k as s,a,t as o,$ as e}from"./chunks/framework.9fa1e75e.js";const t="/assets/page-area.430fbf18.jpg",c="/assets/page-type-select.20b243c7.jpg",r="/assets/new-page-tree.e4f08d98.png",b=JSON.parse('{"title":"Pages and page types","description":"","frontmatter":{"prev":{"text":"Schema Fields | Working with images and media","link":"guide/media.md"},"next":{"text":"Areas and Widgets | Areas","link":"guide/areas-and-widgets.md"}},"headers":[],"relativePath":"guide/pages.md","filePath":"guide/pages.md","lastUpdated":1690289066000}'),i={name:"guide/pages.md"},y=e(`<h1 id="pages-and-page-types" tabindex="-1">Pages and page types <a class="header-anchor" href="#pages-and-page-types" aria-label="Permalink to &quot;Pages and page types&quot;">​</a></h1><p>Every page in an Apostrophe website is assigned a <strong>&quot;page type&quot;</strong>. The page type tells Apostrophe <strong>what template to use</strong> to render the page and <strong>what configuration to apply</strong>. Configurations will often at least include the field schema for the page type.</p><h2 id="creating-a-page-type" tabindex="-1">Creating a page type <a class="header-anchor" href="#creating-a-page-type" aria-label="Permalink to &quot;Creating a page type&quot;">​</a></h2><p>Apostrophe core only includes a &quot;Home page&quot; type with some basic default content options. You will likely need your own page types, which you create by adding modules that extend <code>@apostrophecms/page-type</code> and instantiating them in <code>app.js</code>.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// modules/default-page/index.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">extend</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@apostrophecms/page-type</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// app.js</span></span>
<span class="line"><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">apostrophe</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">shortName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-website</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">modules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">default-page</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>If we add a string field for the subtitle and an <a href="/reference/field-types/area.html">area field</a> for rich text and images, the Default page type would look like:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// modules/default-page/index.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">extend</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@apostrophecms/page-type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">fields</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">add</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">subtitle</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">main</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">area</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">widgets</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">@apostrophecms/rich-text</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">@apostrophecms/image</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">group</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">basics</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">fields</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">title</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">subtitle</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">main</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>See the <a href="/guide/content-schema.html">field schema</a> page for more on configuring fields.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>We can add functionality to the default home page type by adding a configuration file for it at <code>modules/@apostrophecms/home-page/index.js</code>. Add new fields to it as in the example above and this core page type will be ready for additional content possibilities. Or it will be once we update its page template... See below.</p></div><h2 id="page-template-essentials" tabindex="-1">Page template essentials <a class="header-anchor" href="#page-template-essentials" aria-label="Permalink to &quot;Page template essentials&quot;">​</a></h2><p>Each page type requires a template. The only exception to that rule is if a page type extends another page type that already has a template.</p><p>Page templates are added in a <code>views</code> directory for the page type as <code>page.html</code>. The template for the previous example&#39;s default page would be <code>modules/default-page/views/page.html</code>. A very simple page template for the Default page might look like this:</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{# modules/default-page/views/page.html #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% extends &quot;layout.html&quot; %}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{% block main %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">header</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ data.page.title }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    {% if data.page.subtitle %}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ data.page.subtitle }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    {% endif %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">header</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  {% area data.page, &#39;main&#39; %}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endblock %}</span></span></code></pre></div><p>There are a number of things at work here.</p><h3 id="the-template-is-extending-a-layout-html-template" tabindex="-1">The template is extending a <code>layout.html</code> template <a class="header-anchor" href="#the-template-is-extending-a-layout-html-template" aria-label="Permalink to &quot;The template is extending a \`layout.html\` template&quot;">​</a></h3><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{% extends &quot;layout.html&quot; %}</span></span></code></pre></div><p><code>layout.html</code> is a base level template <a href="https://github.com/apostrophecms/a3-boilerplate/blob/main/views/layout.html" target="_blank" rel="noreferrer">used in official Apostrophe boilerplates</a> and placed in <code>views/layout.html</code>. It is used to add markup for things that belong on every page, such as the website navigation and footer. It extends the <code>outerLayout.html</code> template from Apostrophe core, but provides a layer to customize the page wrapper while not overwriting <code>outerLayout.html</code>.</p><p>The layout template might look something like this:</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{% extends data.outerLayout %}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{% block beforeMain %}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">header</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    {# Page header code: logo, navigation, etc. #}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">header</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">main</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endblock %}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{% block main %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  {# Page body content. Pages templates normally override this. #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endblock %}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">{% block afterMain %}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">main</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">footer</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    {# Page header code: contact information, secondary navigation, etc. #}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">footer</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endblock %}</span></span></code></pre></div><h3 id="we-are-inserting-page-template-markup-in-a-template-block" tabindex="-1">We are inserting page template markup in a template block <a class="header-anchor" href="#we-are-inserting-page-template-markup-in-a-template-block" aria-label="Permalink to &quot;We are inserting page template markup in a template block&quot;">​</a></h3><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{% block main %}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endblock %}</span></span></code></pre></div><p>Apostrophe uses the Nunjucks template language, which has a <a href="https://mozilla.github.io/nunjucks/templating.html#block" target="_blank" rel="noreferrer">block system</a> for injecting markup into lower-level templates. The block system involves placing a <code>block</code> tag in the root-level template file, then using those blocks in higher-level templates to insert markup. Since we used the <code>main</code> block here it will overwrite the layout template&#39;s <code>main</code> block.</p><h3 id="page-data-is-on-data-page" tabindex="-1">Page data is on <code>data.page</code> <a class="header-anchor" href="#page-data-is-on-data-page" aria-label="Permalink to &quot;Page data is on \`data.page\`&quot;">​</a></h3><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{{ data.page.title }}</span></span></code></pre></div><p>Templates have access to a <code>data</code> object containing information about the Apostrophe application and current context data. In page templates, <code>data.page</code> contains data for the active page. For our Default page, that includes the title, subtitle, &quot;main&quot; area, and lots of other information.</p>`,26),d=e('<div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{% if data.page.subtitle %}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ data.page.subtitle }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">{% endif %}</span></span></code></pre></div><p>Nunjucks offers additional tags, including the <a href="https://mozilla.github.io/nunjucks/templating.html#if" target="_blank" rel="noreferrer"><code>{% if %}</code> conditional tag</a>, to help work with data in templates.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you want to know what is available in a template object, you can log it in your terminal using the template method <code>apos.log()</code>. This looks like:</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{{ apos.log(data.page) }}</span></span></code></pre></div></div><h3 id="the-widget-area-is-added-using-the-area-tag" tabindex="-1">The widget area is added using the <code>area</code> tag <a class="header-anchor" href="#the-widget-area-is-added-using-the-area-tag" aria-label="Permalink to &quot;The widget area is added using the `area` tag&quot;">​</a></h3><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{% area data.page, &#39;main&#39; %}</span></span></code></pre></div><p>This is a special tag in Apostrophe used to let editors add and manage content widgets to the page. After the <code>area</code> tag name, we pass the tag the field&#39;s context, which is our page, followed by the field name. We <a href="#creating-a-page-type">configured it in the <code>index.js</code> file</a> to use two widget types. While editing the page, the user will have access to a menu to add widgets of those types.</p><p><img src="'+t+'" alt="A page with the area menu opened"></p><p>We&#39;ll explore areas more in <a href="/guide/areas-and-widgets.html">the areas guide</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To overwrite the home page type template, create a template file for it at <code>modules/@apostrophecms/home-page/views/page.html</code> and add template markup.</p></div><h2 id="activating-page-types" tabindex="-1">Activating page types <a class="header-anchor" href="#activating-page-types" aria-label="Permalink to &quot;Activating page types&quot;">​</a></h2><p>There is one more step to make a page type available to use: You&#39;ll need to add it to the core page module&#39;s <code>type</code> option. This configures the &quot;Type&quot; field for pages.</p><p><img src="'+c+`" alt="A page editing modal with the type field highlighted"></p><p>This is a core module option, but you can add your own configuration by giving it an <code>index.js</code> file in your project: <code>modules/@apostrophecms/page/index.js</code>. You&#39;ll then configure it&#39;s <code>types</code> option with all page types you want to allow.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// modules/@apostrophecms/page/index.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.</span><span style="color:#A6ACCD;">export </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">types</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 👇 Adding our new page type</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">default-page</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Default page</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 👇 Optionally including the core &quot;Home page&quot; type</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@apostrophecms/home-page</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Home page</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Each type needs a <code>name</code> matching the module&#39;s name and a label for editors. See the reference section for <a href="/reference/module-api/module-options.html#options-for-the-core-page-module">other core page module options</a>.</p><h2 id="connecting-pages-with-page-tree-navigation" tabindex="-1">Connecting pages with page tree navigation <a class="header-anchor" href="#connecting-pages-with-page-tree-navigation" aria-label="Permalink to &quot;Connecting pages with page tree navigation&quot;">​</a></h2><p>There are many ways to build navigation with Apostrophe. One is to base site navigation on the page tree. The <strong>&quot;page tree&quot;</strong> refers to the parent-child relationship between pages. For example, the home page is the parent of all top-level pages, which may have subpages of their own.</p><p>Pages can be organized into a page tree hierarchy while adding them or through the page manager interface.</p><p><img src="`+r+`" alt="A modal interface with pages organized in order and nested under one another"></p><p>Apostrophe templates have data available to add navigation based on the page tree. This includes:</p><table><thead><tr><th>Data object</th><th>What is it?</th></tr></thead><tbody><tr><td><code>data.home</code></td><td>Home page data. It is similar to the data on <code>data.page</code>, but always references the home page.</td></tr><tr><td><code>data.home._children</code></td><td>Page data for pages one level below the home page in the page tree.</td></tr><tr><td><code>data.page._ancestors</code></td><td>Page data for the ancestors of the active page, starting with the home page.</td></tr><tr><td><code>data.page._children</code></td><td>Page data for pages one level <em>below</em> the active page.</td></tr></tbody></table><p>By default, one level of children are available on each ancestor, as well as on the home page and <code>data.page</code>.</p><p>With that available data, we could construct navigation for the website header using the Nunjucks <code>{% for %}</code> loop tag. The <code>layout.html</code> <code>beforeMain</code> block could look like:</p><div class="language-njk"><button title="Copy Code" class="copy"></button><span class="lang">njk</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{# views/layout.html #}</span></span>
<span class="line"><span style="color:#A6ACCD;">{% block beforeMain %}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">header</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    {# 👇 Adding our navigation wrapper. #}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">nav</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        {# 👇 Referencing \`data.home._children\` and looping over them. #}</span></span>
<span class="line"><span style="color:#A6ACCD;">        {% for page in data.home._children %}</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{{ page._url }}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ page.title }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        {% endfor %}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">nav</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">header</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">main</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endblock %}</span></span></code></pre></div><p>This is looping over the home page&#39;s child pages, printing their URLs and titles into links. This is simply one way to add navigation using the page data in templates.</p>`,25);function D(g,F,h,C,A,m){return l(),p("div",null,[y,s("p",null,[a("Naming specific properties in the double brackets syntax, "),s("code",null,o(),1),a(", prints them in the template.")]),d])}const f=n(i,[["render",D]]);export{b as __pageData,f as default};
