import{_ as s,o as e,c as a,$ as n}from"./chunks/framework.9fa1e75e.js";const D=JSON.parse('{"title":"Client-side JavaScript tips","description":"","frontmatter":{"prev":{"text":"Front end CSS and JS","link":"guide/front-end-assets.md"},"next":{"text":"Front end helper methods","link":"guide/front-end-helpers.md"}},"headers":[],"relativePath":"guide/front-end-tips.md","filePath":"guide/front-end-tips.md","lastUpdated":1690289066000}'),t={name:"guide/front-end-tips.md"},o=n(`<h1 id="client-side-javascript-tips" tabindex="-1">Client-side JavaScript tips <a class="header-anchor" href="#client-side-javascript-tips" aria-label="Permalink to &quot;Client-side JavaScript tips&quot;">​</a></h1><h2 id="register-js-to-keep-up-with-in-context-editing-events" tabindex="-1">Register JS to keep up with in-context editing events <a class="header-anchor" href="#register-js-to-keep-up-with-in-context-editing-events" aria-label="Permalink to &quot;Register JS to keep up with in-context editing events&quot;">​</a></h2><p>Since Apostrophe features in-context editing, the main content area that editors manage <strong>frequently refreshes following changes</strong>. That is necessary to make sure editors are working with the most accurate state of the page. It also means that we need to reapply any event listeners we attach to that part of the DOM after it refreshes.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>What section are we talking about?</strong> If you inspect an Apostrophe page&#39;s markup you will see a <code>div</code> tag with the <code>data-apos-refreshable</code> data attribute. That&#39;s the short answer. Anything inside that <code>div</code> will refresh following in-context changes, editor modal submissions, and other data changes. There is not much outside of this section: mostly Apostrophe UI, the <code>head</code> tag, and generated <code>script</code> tags. So any event listeners (or other DOM interactions) on the <code>body</code> tag or in the <code>head</code> probably only need to be done once. Any others need to be reapplied.</p></div><p>Apostrophe has a utility method to make this easy. <a href="./front-end-helpers.html#onready-fn"><code>apos.util.onReady()</code></a> is in the browser and takes a function as its argument. Every time the page content refreshes the function is run. It&#39;s like a <a href="/guide/custom-widgets.html#client-side-javascript-for-widgets">widget player</a> for the whole page. As such, it is not necessary (and might cause trouble) within a widget player, since the player already does this job.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>No matter <a href="/guide/front-end-assets.html#placing-client-side-code">what module the JS file is in</a>, the code will run on each page. It&#39;s always best to use conditionals to prevent code from running where it is not needed. Look for a relevant DOM element, for example, and only execute the full code when that is present.</p></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// modules/assets/ui/src/index.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> () </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">document.querySelector(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[data-party-toggle]</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">apos</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">util</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onReady</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">partyToggle</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[data-party-toggle]</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">partyToggle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">engagePartyMode</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">engagePartyMode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Party.</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,7),l=[o];function p(r,c,i,d,y,F){return e(),a("div",null,l)}const g=s(t,[["render",p]]);export{D as __pageData,g as default};
