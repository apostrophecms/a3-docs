import{_ as e,o as t,c as o,$ as r}from"./chunks/framework.9fa1e75e.js";const m=JSON.parse('{"title":"Technical overview","description":"","frontmatter":{"prev":{"text":"ðŸŒŸ Introduction","link":"guide/introduction"},"next":{"text":"ðŸš€ Getting Started","link":" guide/setting-up.md"}},"headers":[],"relativePath":"guide/technical-overview.md","filePath":"guide/technical-overview.md","lastUpdated":1690289066000}'),a={name:"guide/technical-overview.md"},i=r('<h1 id="technical-overview" tabindex="-1">Technical overview <a class="header-anchor" href="#technical-overview" aria-label="Permalink to &quot;Technical overview&quot;">â€‹</a></h1><h2 id="the-core-tech" tabindex="-1">The core tech <a class="header-anchor" href="#the-core-tech" aria-label="Permalink to &quot;The core tech&quot;">â€‹</a></h2><p>In brief, the main technologies behind Apostrophe are:</p><ul><li><a href="https://nodejs.org" target="_blank" rel="noreferrer">Node.js</a>: <strong>Popular server-side JavaScript runtime.</strong> We originally chose Node.js to achieve a fully-JavaScript development experience for developers. It has continued to improve over time, delivering high performance and powerful features we can use.</li><li><a href="https://npmjs.org/package/express" target="_blank" rel="noreferrer">Express</a>: <strong>Un-opinionated Node.js web framework.</strong> Express is the most widely used web framework for Node.js. Because it is simple, un-opinionated, and well-known, it was straightforward to extend it to suit Apostrophe&#39;s needs.</li><li><a href="https://www.mongodb.com" target="_blank" rel="noreferrer">MongoDB</a>: <strong>Secure, document-based database engine.</strong> We chose MongoDB for its fluent JavaScript-based API, its safety from &quot;SQL injection&quot;â€”style attacks, its developer-friendliness, and its support for documents with varying schemas in the same collection.</li><li><a href="https://mozilla.github.io/nunjucks/" target="_blank" rel="noreferrer">Nunjucks</a>: <strong>Richly featured template language for JavaScript.</strong> Nunjucks provides tons of features, extensibility, and a syntax nearly identical to Twig, Jinja, and other Django-inspired templating languages.</li></ul><h2 id="directory-structure" tabindex="-1">Directory structure <a class="header-anchor" href="#directory-structure" aria-label="Permalink to &quot;Directory structure&quot;">â€‹</a></h2><p>There are a few directories and top-level files that are especially important in Apostrophe projects. Here is a rough overview of these files and folders you will see in the official boilerplate.</p><table><thead><tr><th>Folder/File</th><th>What is it?</th></tr></thead><tbody><tr><td><code>app.js</code></td><td>The heart of the application. This is where you tell Apostrophe what modules are in your project and set a few top-level parameters.</td></tr><tr><td><code>/modules</code></td><td>All project-level <a href="/reference/glossary.html#module">modules</a> and configuration for installed modules.</td></tr><tr><td><code>/public</code></td><td>Public, static files (not managed through the CMS). Apostrophe will generate specific directories inside, but you can also use it as needed.</td></tr><tr><td><code>/views</code></td><td>Template files that do not belong to any one module. Apostrophe looks for site wrapper templates here, including <code>layout.html</code>.</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Core module configuration is all done in a subdirectory of <code>modules</code>: <code>modules/@apostrophecms</code>. This keeps core modules organized together and out of the way, following <a href="https://docs.npmjs.com/about-scopes" target="_blank" rel="noreferrer">the npm scoping pattern</a>.</p></div>',8),s=[i];function n(l,d,c,h,p,u){return t(),o("div",null,s)}const g=e(a,[["render",n]]);export{m as __pageData,g as default};
